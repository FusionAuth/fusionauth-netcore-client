/*
 * Copyright (c) 2019-2020, FusionAuth, All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */
savantVersion = "1.0.0"

project(group: "io.fusionauth", name: "fusionauth-netcore-client", version: "1.21.0", licenses: ["ApacheV2_0"]) {
  workflow {
    standard()
  }

  publishWorkflow {
    subversion(repository: "http://svn.inversoft.org/savant")
  }
}

// Plugins
release = loadPlugin(id: "org.savantbuild.plugin:release-git:${savantVersion}")

target(name: "clean", description: "Cleans build directory") {
  ProcessBuilder pb = new ProcessBuilder(
      "dotnet", "clean")
      .inheritIO()
      .directory(new File("./fusionauth-netcore-client"))

  def process = pb.start()
  process.consumeProcessOutput(System.out, System.err)
  process.waitFor()
  return process.exitValue() == 0
}

// To install dotnet on macOS
//  > brew cask install dotnet
target(name: "setup", description: "Setup dotnet on macOS") {
  ProcessBuilder pb = new ProcessBuilder(
      "brew", "cask", "install", "dotnet")
      .inheritIO()

  def process = pb.start()
  process.consumeProcessOutput(System.out, System.err)
  process.waitFor()
  return process.exitValue() == 0
}

target(name: "compile", description: "Compiles the source code") {
  ProcessBuilder pb = new ProcessBuilder(
      "dotnet", "build")
      .inheritIO()
      .directory(new File("./fusionauth-netcore-client"))

  def process = pb.start()
  process.consumeProcessOutput(System.out, System.err)
  process.waitFor()
  return process.exitValue() == 0
}

target(name: "test", description: "Runs the project's unit tests", dependsOn: ["compile"]) {
  ProcessBuilder pb = new ProcessBuilder(
      "dotnet", "test")
      .inheritIO()
      .directory(new File("./fusionauth-netcore-client"))

  def process = pb.start()
  process.consumeProcessOutput(System.out, System.err)
  process.waitFor()
}

target(name: "int", description: "Releases a local integration build of the project", dependsOn: ["compile"]) {
}

target(name: "idea", description: "Updates the IntelliJ IDEA module file") {
}

target(name: "bundle", description: "Builds the project release bundle", dependsOn: "int") {
}

target(name: "release", description: "Releases a full version of the project", dependsOn: ["clean", "int"]) {
  release.release()
}

target(name: "pack", description: "Releases a full version of the project", dependsOn: ["clean", "int"]) {
  ProcessBuilder pb = new ProcessBuilder(
      "dotnet", "pack")
      .inheritIO()
      .directory(new File("./fusionauth-netcore-client"))

  def process = pb.start()
  process.consumeProcessOutput(System.out, System.err)
  process.waitFor()
  return process.exitValue() == 0
}

target(name: "publish", description: "Releases a full version of the project", dependsOn: ["pack"]) {
  ProcessBuilder pb = new ProcessBuilder(
      "dotnet", "nuget", "push",
      "./bin/Release/FusionAuth.Client.${project.version}.nupkg",
      "-k",
      "${global.nugetAPIKey}",
      "-s",
      "https://api.nuget.org/v3/index.json")
      .inheritIO()
      .directory(new File("./fusionauth-netcore-client"))

  def process = pb.start()
  process.consumeProcessOutput(System.out, System.err)
  process.waitFor()
  return process.exitValue() == 0
}
