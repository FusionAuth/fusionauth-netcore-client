/*
 * Copyright (c) 2020, FusionAuth, All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using io.fusionauth.domain;
using io.fusionauth.domain.api;
using io.fusionauth.domain.api.email;
using io.fusionauth.domain.api.identityProvider;
using io.fusionauth.domain.api.jwt;
using io.fusionauth.domain.api.passwordless;
using io.fusionauth.domain.api.report;
using io.fusionauth.domain.api.twoFactor;
using io.fusionauth.domain.api.user;
using io.fusionauth.domain.oauth2;

namespace io.fusionauth {
  public interface IFusionAuthAsyncClient {

    /// <summary>
    /// Takes an action on a user. The user being actioned is called the "actionee" and the user taking the action is called the
    /// "actioner". Both user ids are required in the request object.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="request"> The action request that includes all of the information about the action being taken including
    /// the id of the action, any options and the duration (if applicable).</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<ActionResponse>> ActionUserAsync(ActionRequest request);

    /// <summary>
    /// Adds a user to an existing family. The family id must be specified.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="familyId"> The id of the family.</param>
    /// <param name="request"> The request object that contains all of the information used to determine which user to add to the family.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<FamilyResponse>> AddUserToFamilyAsync(Guid? familyId, FamilyRequest request);

    /// <summary>
    /// Cancels the user action.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="actionId"> The action id of the action to cancel.</param>
    /// <param name="request"> The action request that contains the information about the cancellation.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<ActionResponse>> CancelActionAsync(Guid? actionId, ActionRequest request);

    /// <summary>
    /// Changes a user's password using the change password Id. This usually occurs after an email has been sent to the user
    /// and they clicked on a link to reset their password.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="changePasswordId"> The change password Id used to find the user. This value is generated by FusionAuth once the change password workflow has been initiated.</param>
    /// <param name="request"> The change password request that contains all of the information used to change the password.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<ChangePasswordResponse>> ChangePasswordAsync(string changePasswordId, ChangePasswordRequest request);

    /// <summary>
    /// Changes a user's password using their identity (login id and password). Using a loginId instead of the changePasswordId
    /// bypasses the email verification and allows a password to be changed directly without first calling the #forgotPassword
    /// method.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="request"> The change password request that contains all of the information used to change the password.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> ChangePasswordByIdentityAsync(ChangePasswordRequest request);

    /// <summary>
    /// Adds a comment to the user's account.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="request"> The request object that contains all of the information used to create the user comment.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> CommentOnUserAsync(UserCommentRequest request);

    /// <summary>
    /// Creates an application. You can optionally specify an Id for the application, if not provided one will be generated.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="applicationId"> (Optional) The Id to use for the application. If not provided a secure random UUID will be generated.</param>
    /// <param name="request"> The request object that contains all of the information used to create the application.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<ApplicationResponse>> CreateApplicationAsync(Guid? applicationId, ApplicationRequest request);

    /// <summary>
    /// Creates a new role for an application. You must specify the id of the application you are creating the role for.
    /// You can optionally specify an Id for the role inside the ApplicationRole object itself, if not provided one will be generated.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="applicationId"> The Id of the application to create the role on.</param>
    /// <param name="roleId"> (Optional) The Id of the role. If not provided a secure random UUID will be generated.</param>
    /// <param name="request"> The request object that contains all of the information used to create the application role.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<ApplicationResponse>> CreateApplicationRoleAsync(Guid? applicationId, Guid? roleId, ApplicationRequest request);

    /// <summary>
    /// Creates an audit log with the message and user name (usually an email). Audit logs should be written anytime you
    /// make changes to the FusionAuth database. When using the FusionAuth App web interface, any changes are automatically
    /// written to the audit log. However, if you are accessing the API, you must write the audit logs yourself.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="request"> The request object that contains all of the information used to create the audit log entry.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<AuditLogResponse>> CreateAuditLogAsync(AuditLogRequest request);

    /// <summary>
    /// Creates a connector.  You can optionally specify an Id for the connector, if not provided one will be generated.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="connectorId"> (Optional) The Id for the connector. If not provided a secure random UUID will be generated.</param>
    /// <param name="request"> The request object that contains all of the information used to create the connector.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<ConnectorResponse>> CreateConnectorAsync(Guid? connectorId, ConnectorRequest request);

    /// <summary>
    /// Creates a user consent type. You can optionally specify an Id for the consent type, if not provided one will be generated.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="consentId"> (Optional) The Id for the consent. If not provided a secure random UUID will be generated.</param>
    /// <param name="request"> The request object that contains all of the information used to create the consent.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<ConsentResponse>> CreateConsentAsync(Guid? consentId, ConsentRequest request);

    /// <summary>
    /// Creates an email template. You can optionally specify an Id for the template, if not provided one will be generated.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="emailTemplateId"> (Optional) The Id for the template. If not provided a secure random UUID will be generated.</param>
    /// <param name="request"> The request object that contains all of the information used to create the email template.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<EmailTemplateResponse>> CreateEmailTemplateAsync(Guid? emailTemplateId, EmailTemplateRequest request);

    /// <summary>
    /// Creates a family with the user id in the request as the owner and sole member of the family. You can optionally specify an id for the
    /// family, if not provided one will be generated.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="familyId"> (Optional) The id for the family. If not provided a secure random UUID will be generated.</param>
    /// <param name="request"> The request object that contains all of the information used to create the family.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<FamilyResponse>> CreateFamilyAsync(Guid? familyId, FamilyRequest request);

    /// <summary>
    /// Creates a form.  You can optionally specify an Id for the form, if not provided one will be generated.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="formId"> (Optional) The Id for the form. If not provided a secure random UUID will be generated.</param>
    /// <param name="request"> The request object that contains all of the information used to create the form.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<FormResponse>> CreateFormAsync(Guid? formId, FormRequest request);

    /// <summary>
    /// Creates a form field.  You can optionally specify an Id for the form, if not provided one will be generated.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="fieldId"> (Optional) The Id for the form field. If not provided a secure random UUID will be generated.</param>
    /// <param name="request"> The request object that contains all of the information used to create the form field.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<FormFieldResponse>> CreateFormFieldAsync(Guid? fieldId, FormFieldRequest request);

    /// <summary>
    /// Creates a group. You can optionally specify an Id for the group, if not provided one will be generated.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="groupId"> (Optional) The Id for the group. If not provided a secure random UUID will be generated.</param>
    /// <param name="request"> The request object that contains all of the information used to create the group.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<GroupResponse>> CreateGroupAsync(Guid? groupId, GroupRequest request);

    /// <summary>
    /// Creates a member in a group.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="request"> The request object that contains all of the information used to create the group member(s).</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<MemberResponse>> CreateGroupMembersAsync(MemberRequest request);

    /// <summary>
    /// Creates an identity provider. You can optionally specify an Id for the identity provider, if not provided one will be generated.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="identityProviderId"> (Optional) The Id of the identity provider. If not provided a secure random UUID will be generated.</param>
    /// <param name="request"> The request object that contains all of the information used to create the identity provider.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<IdentityProviderResponse>> CreateIdentityProviderAsync(Guid? identityProviderId, IdentityProviderRequest request);

    /// <summary>
    /// Creates a Lambda. You can optionally specify an Id for the lambda, if not provided one will be generated.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="lambdaId"> (Optional) The Id for the lambda. If not provided a secure random UUID will be generated.</param>
    /// <param name="request"> The request object that contains all of the information used to create the lambda.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<LambdaResponse>> CreateLambdaAsync(Guid? lambdaId, LambdaRequest request);

    /// <summary>
    /// Creates a tenant. You can optionally specify an Id for the tenant, if not provided one will be generated.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="tenantId"> (Optional) The Id for the tenant. If not provided a secure random UUID will be generated.</param>
    /// <param name="request"> The request object that contains all of the information used to create the tenant.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<TenantResponse>> CreateTenantAsync(Guid? tenantId, TenantRequest request);

    /// <summary>
    /// Creates a Theme. You can optionally specify an Id for the theme, if not provided one will be generated.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="themeId"> (Optional) The Id for the theme. If not provided a secure random UUID will be generated.</param>
    /// <param name="request"> The request object that contains all of the information used to create the theme.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<ThemeResponse>> CreateThemeAsync(Guid? themeId, ThemeRequest request);

    /// <summary>
    /// Creates a user. You can optionally specify an Id for the user, if not provided one will be generated.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userId"> (Optional) The Id for the user. If not provided a secure random UUID will be generated.</param>
    /// <param name="request"> The request object that contains all of the information used to create the user.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<UserResponse>> CreateUserAsync(Guid? userId, UserRequest request);

    /// <summary>
    /// Creates a user action. This action cannot be taken on a user until this call successfully returns. Anytime after
    /// that the user action can be applied to any user.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userActionId"> (Optional) The Id for the user action. If not provided a secure random UUID will be generated.</param>
    /// <param name="request"> The request object that contains all of the information used to create the user action.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<UserActionResponse>> CreateUserActionAsync(Guid? userActionId, UserActionRequest request);

    /// <summary>
    /// Creates a user reason. This user action reason cannot be used when actioning a user until this call completes
    /// successfully. Anytime after that the user action reason can be used.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userActionReasonId"> (Optional) The Id for the user action reason. If not provided a secure random UUID will be generated.</param>
    /// <param name="request"> The request object that contains all of the information used to create the user action reason.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<UserActionReasonResponse>> CreateUserActionReasonAsync(Guid? userActionReasonId, UserActionReasonRequest request);

    /// <summary>
    /// Creates a single User consent.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userConsentId"> (Optional) The Id for the User consent. If not provided a secure random UUID will be generated.</param>
    /// <param name="request"> The request that contains the user consent information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<UserConsentResponse>> CreateUserConsentAsync(Guid? userConsentId, UserConsentRequest request);

    /// <summary>
    /// Creates a webhook. You can optionally specify an Id for the webhook, if not provided one will be generated.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="webhookId"> (Optional) The Id for the webhook. If not provided a secure random UUID will be generated.</param>
    /// <param name="request"> The request object that contains all of the information used to create the webhook.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<WebhookResponse>> CreateWebhookAsync(Guid? webhookId, WebhookRequest request);

    /// <summary>
    /// Deactivates the application with the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="applicationId"> The Id of the application to deactivate.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> DeactivateApplicationAsync(Guid? applicationId);

    /// <summary>
    /// Deactivates the user with the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userId"> The Id of the user to deactivate.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> DeactivateUserAsync(Guid? userId);

    /// <summary>
    /// Deactivates the user action with the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userActionId"> The Id of the user action to deactivate.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> DeactivateUserActionAsync(Guid? userActionId);

    /// <summary>
    /// Deactivates the users with the given ids.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userIds"> The ids of the users to deactivate.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    [Obsolete("This method has been renamed to DeactivateUsersByIdsAsync, use that method instead.")]
    Task<ClientResponse<UserDeleteResponse>> DeactivateUsersAsync(List<string> userIds);

    /// <summary>
    /// Deactivates the users with the given ids.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userIds"> The ids of the users to deactivate.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<UserDeleteResponse>> DeactivateUsersByIdsAsync(List<string> userIds);

    /// <summary>
    /// Hard deletes an application. This is a dangerous operation and should not be used in most circumstances. This will
    /// delete the application, any registrations for that application, metrics and reports for the application, all the
    /// roles for the application, and any other data associated with the application. This operation could take a very
    /// long time, depending on the amount of data in your database.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="applicationId"> The Id of the application to delete.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> DeleteApplicationAsync(Guid? applicationId);

    /// <summary>
    /// Hard deletes an application role. This is a dangerous operation and should not be used in most circumstances. This
    /// permanently removes the given role from all users that had it.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="applicationId"> The Id of the application to deactivate.</param>
    /// <param name="roleId"> The Id of the role to delete.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> DeleteApplicationRoleAsync(Guid? applicationId, Guid? roleId);

    /// <summary>
    /// Deletes the connector for the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="connectorId"> The Id of the connector to delete.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> DeleteConnectorAsync(Guid? connectorId);

    /// <summary>
    /// Deletes the consent for the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="consentId"> The Id of the consent to delete.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> DeleteConsentAsync(Guid? consentId);

    /// <summary>
    /// Deletes the email template for the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="emailTemplateId"> The Id of the email template to delete.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> DeleteEmailTemplateAsync(Guid? emailTemplateId);

    /// <summary>
    /// Deletes the form for the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="formId"> The Id of the form to delete.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> DeleteFormAsync(Guid? formId);

    /// <summary>
    /// Deletes the form field for the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="fieldId"> The Id of the form field to delete.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> DeleteFormFieldAsync(Guid? fieldId);

    /// <summary>
    /// Deletes the group for the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="groupId"> The Id of the group to delete.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> DeleteGroupAsync(Guid? groupId);

    /// <summary>
    /// Removes users as members of a group.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="request"> The member request that contains all of the information used to remove members to the group.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> DeleteGroupMembersAsync(MemberDeleteRequest request);

    /// <summary>
    /// Deletes the identity provider for the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="identityProviderId"> The Id of the identity provider to delete.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> DeleteIdentityProviderAsync(Guid? identityProviderId);

    /// <summary>
    /// Deletes the key for the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="keyId"> The Id of the key to delete.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> DeleteKeyAsync(Guid? keyId);

    /// <summary>
    /// Deletes the lambda for the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="lambdaId"> The Id of the lambda to delete.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> DeleteLambdaAsync(Guid? lambdaId);

    /// <summary>
    /// Deletes the user registration for the given user and application.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userId"> The Id of the user whose registration is being deleted.</param>
    /// <param name="applicationId"> The Id of the application to remove the registration for.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> DeleteRegistrationAsync(Guid? userId, Guid? applicationId);

    /// <summary>
    /// Deletes the tenant for the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="tenantId"> The Id of the tenant to delete.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> DeleteTenantAsync(Guid? tenantId);

    /// <summary>
    /// Deletes the theme for the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="themeId"> The Id of the theme to delete.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> DeleteThemeAsync(Guid? themeId);

    /// <summary>
    /// Deletes the user for the given Id. This permanently deletes all information, metrics, reports and data associated
    /// with the user.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userId"> The Id of the user to delete.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> DeleteUserAsync(Guid? userId);

    /// <summary>
    /// Deletes the user action for the given Id. This permanently deletes the user action and also any history and logs of
    /// the action being applied to any users.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userActionId"> The Id of the user action to delete.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> DeleteUserActionAsync(Guid? userActionId);

    /// <summary>
    /// Deletes the user action reason for the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userActionReasonId"> The Id of the user action reason to delete.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> DeleteUserActionReasonAsync(Guid? userActionReasonId);

    /// <summary>
    /// Deletes the users with the given ids, or users matching the provided JSON query or queryString.
    /// The order of preference is ids, query and then queryString, it is recommended to only provide one of the three for the request.
    /// 
    /// This method can be used to deactivate or permanently delete (hard-delete) users based upon the hardDelete boolean in the request body.
    /// Using the dryRun parameter you may also request the result of the action without actually deleting or deactivating any users.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="request"> The UserDeleteRequest.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    [Obsolete("This method has been renamed to DeleteUsersByQueryAsync, use that method instead.")]
    Task<ClientResponse<UserDeleteResponse>> DeleteUsersAsync(UserDeleteRequest request);

    /// <summary>
    /// Deletes the users with the given ids, or users matching the provided JSON query or queryString.
    /// The order of preference is ids, query and then queryString, it is recommended to only provide one of the three for the request.
    /// 
    /// This method can be used to deactivate or permanently delete (hard-delete) users based upon the hardDelete boolean in the request body.
    /// Using the dryRun parameter you may also request the result of the action without actually deleting or deactivating any users.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="request"> The UserDeleteRequest.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<UserDeleteResponse>> DeleteUsersByQueryAsync(UserDeleteRequest request);

    /// <summary>
    /// Deletes the webhook for the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="webhookId"> The Id of the webhook to delete.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> DeleteWebhookAsync(Guid? webhookId);

    /// <summary>
    /// Disable Two Factor authentication for a user.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userId"> The Id of the User for which you're disabling Two Factor authentication.</param>
    /// <param name="code"> The Two Factor code used verify the the caller knows the Two Factor secret.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> DisableTwoFactorAsync(Guid? userId, string code);

    /// <summary>
    /// Enable Two Factor authentication for a user.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userId"> The Id of the user to enable Two Factor authentication.</param>
    /// <param name="request"> The two factor enable request information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> EnableTwoFactorAsync(Guid? userId, TwoFactorRequest request);

    /// <summary>
    /// Exchanges an OAuth authorization code for an access token.
    /// Makes a request to the Token endpoint to exchange the authorization code returned from the Authorize endpoint for an access token.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="code"> The authorization code returned on the /oauth2/authorize response.</param>
    /// <param name="client_id"> The unique client identifier. The client Id is the Id of the FusionAuth Application in which you you are attempting to authenticate.</param>
    /// <param name="client_secret"> (Optional) The client secret. This value will be required if client authentication is enabled.</param>
    /// <param name="redirect_uri"> The URI to redirect to upon a successful request.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<AccessToken>> ExchangeOAuthCodeForAccessTokenAsync(string code, string client_id, string client_secret, string redirect_uri);

    /// <summary>
    /// Exchanges an OAuth authorization code and code_verifier for an access token.
    /// Makes a request to the Token endpoint to exchange the authorization code returned from the Authorize endpoint and a code_verifier for an access token.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="code"> The authorization code returned on the /oauth2/authorize response.</param>
    /// <param name="client_id"> (Optional) The unique client identifier. The client Id is the Id of the FusionAuth Application in which you you are attempting to authenticate. This parameter is optional when the Authorization header is provided.</param>
    /// <param name="client_secret"> (Optional) The client secret. This value may optionally be provided in the request body instead of the Authorization header.</param>
    /// <param name="redirect_uri"> The URI to redirect to upon a successful request.</param>
    /// <param name="code_verifier"> The random string generated previously. Will be compared with the code_challenge sent previously, which allows the OAuth provider to authenticate your app.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<AccessToken>> ExchangeOAuthCodeForAccessTokenUsingPKCEAsync(string code, string client_id, string client_secret, string redirect_uri, string code_verifier);

    /// <summary>
    /// Exchange a Refresh Token for an Access Token.
    /// If you will be using the Refresh Token Grant, you will make a request to the Token endpoint to exchange the user’s refresh token for an access token.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="refresh_token"> The refresh token that you would like to use to exchange for an access token.</param>
    /// <param name="client_id"> (Optional) The unique client identifier. The client Id is the Id of the FusionAuth Application in which you you are attempting to authenticate. This parameter is optional when the Authorization header is provided.</param>
    /// <param name="client_secret"> (Optional) The client secret. This value may optionally be provided in the request body instead of the Authorization header.</param>
    /// <param name="scope"> (Optional) This parameter is optional and if omitted, the same scope requested during the authorization request will be used. If provided the scopes must match those requested during the initial authorization request.</param>
    /// <param name="user_code"> (Optional) The end-user verification code. This code is required if using this endpoint to approve the Device Authorization.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<AccessToken>> ExchangeRefreshTokenForAccessTokenAsync(string refresh_token, string client_id, string client_secret, string scope, string user_code);

    /// <summary>
    /// Exchange a refresh token for a new JWT.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="request"> The refresh request.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RefreshResponse>> ExchangeRefreshTokenForJWTAsync(RefreshRequest request);

    /// <summary>
    /// Exchange User Credentials for a Token.
    /// If you will be using the Resource Owner Password Credential Grant, you will make a request to the Token endpoint to exchange the user’s email and password for an access token.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="username"> The login identifier of the user. The login identifier can be either the email or the username.</param>
    /// <param name="password"> The user’s password.</param>
    /// <param name="client_id"> (Optional) The unique client identifier. The client Id is the Id of the FusionAuth Application in which you you are attempting to authenticate. This parameter is optional when the Authorization header is provided.</param>
    /// <param name="client_secret"> (Optional) The client secret. This value may optionally be provided in the request body instead of the Authorization header.</param>
    /// <param name="scope"> (Optional) This parameter is optional and if omitted, the same scope requested during the authorization request will be used. If provided the scopes must match those requested during the initial authorization request.</param>
    /// <param name="user_code"> (Optional) The end-user verification code. This code is required if using this endpoint to approve the Device Authorization.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<AccessToken>> ExchangeUserCredentialsForAccessTokenAsync(string username, string password, string client_id, string client_secret, string scope, string user_code);

    /// <summary>
    /// Begins the forgot password sequence, which kicks off an email to the user so that they can reset their password.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="request"> The request that contains the information about the user so that they can be emailed.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<ForgotPasswordResponse>> ForgotPasswordAsync(ForgotPasswordRequest request);

    /// <summary>
    /// Generate a new Email Verification Id to be used with the Verify Email API. This API will not attempt to send an
    /// email to the User. This API may be used to collect the verificationId for use with a third party system.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="email"> The email address of the user that needs a new verification email.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<VerifyEmailResponse>> GenerateEmailVerificationIdAsync(string email);

    /// <summary>
    /// Generate a new RSA or EC key pair or an HMAC secret.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="keyId"> (Optional) The Id for the key. If not provided a secure random UUID will be generated.</param>
    /// <param name="request"> The request object that contains all of the information used to create the key.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<KeyResponse>> GenerateKeyAsync(Guid? keyId, KeyRequest request);

    /// <summary>
    /// Generate a new Application Registration Verification Id to be used with the Verify Registration API. This API will not attempt to send an
    /// email to the User. This API may be used to collect the verificationId for use with a third party system.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="email"> The email address of the user that needs a new verification email.</param>
    /// <param name="applicationId"> The Id of the application to be verified.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<VerifyRegistrationResponse>> GenerateRegistrationVerificationIdAsync(string email, Guid? applicationId);

    /// <summary>
    /// Generate a Two Factor secret that can be used to enable Two Factor authentication for a User. The response will contain
    /// both the secret and a Base32 encoded form of the secret which can be shown to a User when using a 2 Step Authentication
    /// application such as Google Authenticator.
    /// This is an asynchronous method.
    /// </summary>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<SecretResponse>> GenerateTwoFactorSecretAsync();

    /// <summary>
    /// Generate a Two Factor secret that can be used to enable Two Factor authentication for a User. The response will contain
    /// both the secret and a Base32 encoded form of the secret which can be shown to a User when using a 2 Step Authentication
    /// application such as Google Authenticator.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="encodedJWT"> The encoded JWT (access token).</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<SecretResponse>> GenerateTwoFactorSecretUsingJWTAsync(string encodedJWT);

    /// <summary>
    /// Handles login via third-parties including Social login, external OAuth and OpenID Connect, and other
    /// login systems.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="request"> The third-party login request that contains information from the third-party login
    /// providers that FusionAuth uses to reconcile the user's account.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<LoginResponse>> IdentityProviderLoginAsync(IdentityProviderLoginRequest request);

    /// <summary>
    /// Import an existing RSA or EC key pair or an HMAC secret.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="keyId"> (Optional) The Id for the key. If not provided a secure random UUID will be generated.</param>
    /// <param name="request"> The request object that contains all of the information used to create the key.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<KeyResponse>> ImportKeyAsync(Guid? keyId, KeyRequest request);

    /// <summary>
    /// Bulk imports refresh tokens. This request performs minimal validation and runs batch inserts of refresh tokens with the
    /// expectation that each token represents a user that already exists and is registered for the corresponding FusionAuth
    /// Application. This is done to increases the insert performance.
    /// 
    /// Therefore, if you encounter an error due to a database key violation, the response will likely offer a generic
    /// explanation. If you encounter an error, you may optionally enable additional validation to receive a JSON response
    /// body with specific validation errors. This will slow the request down but will allow you to identify the cause of
    /// the failure. See the validateDbConstraints request parameter.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="request"> The request that contains all of the information about all of the refresh tokens to import.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> ImportRefreshTokensAsync(RefreshTokenImportRequest request);

    /// <summary>
    /// Bulk imports users. This request performs minimal validation and runs batch inserts of users with the expectation
    /// that each user does not yet exist and each registration corresponds to an existing FusionAuth Application. This is done to
    /// increases the insert performance.
    /// 
    /// Therefore, if you encounter an error due to a database key violation, the response will likely offer
    /// a generic explanation. If you encounter an error, you may optionally enable additional validation to receive a JSON response
    /// body with specific validation errors. This will slow the request down but will allow you to identify the cause of the failure. See
    /// the validateDbConstraints request parameter.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="request"> The request that contains all of the information about all of the users to import.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> ImportUsersAsync(ImportRequest request);

    /// <summary>
    /// Inspect an access token issued by FusionAuth.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="client_id"> The unique client identifier. The client Id is the Id of the FusionAuth Application for which this token was generated.</param>
    /// <param name="token"> The access token returned by this OAuth provider as the result of a successful authentication.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<IntrospectResponse>> IntrospectAccessTokenAsync(string client_id, string token);

    /// <summary>
    /// Issue a new access token (JWT) for the requested Application after ensuring the provided JWT is valid. A valid
    /// access token is properly signed and not expired.
    /// <p>
    /// This API may be used in an SSO configuration to issue new tokens for another application after the user has
    /// obtained a valid token from authentication.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="applicationId"> The Application Id for which you are requesting a new access token be issued.</param>
    /// <param name="encodedJWT"> The encoded JWT (access token).</param>
    /// <param name="refreshToken"> (Optional) An existing refresh token used to request a refresh token in addition to a JWT in the response.
    /// <p>The target application represented by the applicationId request parameter must have refresh
    /// tokens enabled in order to receive a refresh token in the response.</p></param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<IssueResponse>> IssueJWTAsync(Guid? applicationId, string encodedJWT, string refreshToken);

    /// <summary>
    /// Authenticates a user to FusionAuth. 
    /// 
    /// This API optionally requires an API key. See <code>Application.loginConfiguration.requireAuthentication</code>.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="request"> The login request that contains the user credentials used to log them in.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<LoginResponse>> LoginAsync(LoginRequest request);

    /// <summary>
    /// Sends a ping to FusionAuth indicating that the user was automatically logged into an application. When using
    /// FusionAuth's SSO or your own, you should call this if the user is already logged in centrally, but accesses an
    /// application where they no longer have a session. This helps correctly track login counts, times and helps with
    /// reporting.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userId"> The Id of the user that was logged in.</param>
    /// <param name="applicationId"> The Id of the application that they logged into.</param>
    /// <param name="callerIPAddress"> (Optional) The IP address of the end-user that is logging in. If a null value is provided
    /// the IP address will be that of the client or last proxy that sent the request.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> LoginPingAsync(Guid? userId, Guid? applicationId, string callerIPAddress);

    /// <summary>
    /// The Logout API is intended to be used to remove the refresh token and access token cookies if they exist on the
    /// client and revoke the refresh token stored. This API does nothing if the request does not contain an access
    /// token or refresh token cookies.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="global"> When this value is set to true all of the refresh tokens issued to the owner of the
    /// provided token will be revoked.</param>
    /// <param name="refreshToken"> (Optional) The refresh_token as a request parameter instead of coming in via a cookie.
    /// If provided this takes precedence over the cookie.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> LogoutAsync(bool? global, string refreshToken);

    /// <summary>
    /// Retrieves the identity provider for the given domain. A 200 response code indicates the domain is managed
    /// by a registered identity provider. A 404 indicates the domain is not managed.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="domain"> The domain or email address to lookup.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<LookupResponse>> LookupIdentityProviderAsync(string domain);

    /// <summary>
    /// Modifies a temporal user action by changing the expiration of the action and optionally adding a comment to the
    /// action.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="actionId"> The Id of the action to modify. This is technically the user action log id.</param>
    /// <param name="request"> The request that contains all of the information about the modification.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<ActionResponse>> ModifyActionAsync(Guid? actionId, ActionRequest request);

    /// <summary>
    /// Complete a login request using a passwordless code
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="request"> The passwordless login request that contains all of the information used to complete login.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<LoginResponse>> PasswordlessLoginAsync(PasswordlessLoginRequest request);

    /// <summary>
    /// Updates, via PATCH, the application with the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="applicationId"> The Id of the application to update.</param>
    /// <param name="request"> The request that contains just the new application information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<ApplicationResponse>> PatchApplicationAsync(Guid? applicationId, Dictionary<string, object> request);

    /// <summary>
    /// Updates, via PATCH, the application role with the given id for the application.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="applicationId"> The Id of the application that the role belongs to.</param>
    /// <param name="roleId"> The Id of the role to update.</param>
    /// <param name="request"> The request that contains just the new role information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<ApplicationResponse>> PatchApplicationRoleAsync(Guid? applicationId, Guid? roleId, Dictionary<string, object> request);

    /// <summary>
    /// Updates, via PATCH, the connector with the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="connectorId"> The Id of the connector to update.</param>
    /// <param name="request"> The request that contains just the new connector information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<ConnectorResponse>> PatchConnectorAsync(Guid? connectorId, Dictionary<string, object> request);

    /// <summary>
    /// Updates, via PATCH, the consent with the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="consentId"> The Id of the consent to update.</param>
    /// <param name="request"> The request that contains just the new consent information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<ConsentResponse>> PatchConsentAsync(Guid? consentId, Dictionary<string, object> request);

    /// <summary>
    /// Updates, via PATCH, the email template with the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="emailTemplateId"> The Id of the email template to update.</param>
    /// <param name="request"> The request that contains just the new email template information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<EmailTemplateResponse>> PatchEmailTemplateAsync(Guid? emailTemplateId, Dictionary<string, object> request);

    /// <summary>
    /// Updates, via PATCH, the group with the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="groupId"> The Id of the group to update.</param>
    /// <param name="request"> The request that contains just the new group information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<GroupResponse>> PatchGroupAsync(Guid? groupId, Dictionary<string, object> request);

    /// <summary>
    /// Updates, via PATCH, the identity provider with the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="identityProviderId"> The Id of the identity provider to update.</param>
    /// <param name="request"> The request object that contains just the updated identity provider information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<IdentityProviderResponse>> PatchIdentityProviderAsync(Guid? identityProviderId, Dictionary<string, object> request);

    /// <summary>
    /// Updates, via PATCH, the available integrations.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="request"> The request that contains just the new integration information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<IntegrationResponse>> PatchIntegrationsAsync(Dictionary<string, object> request);

    /// <summary>
    /// Updates, via PATCH, the lambda with the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="lambdaId"> The Id of the lambda to update.</param>
    /// <param name="request"> The request that contains just the new lambda information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<LambdaResponse>> PatchLambdaAsync(Guid? lambdaId, Dictionary<string, object> request);

    /// <summary>
    /// Updates, via PATCH, the registration for the user with the given id and the application defined in the request.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userId"> The Id of the user whose registration is going to be updated.</param>
    /// <param name="request"> The request that contains just the new registration information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RegistrationResponse>> PatchRegistrationAsync(Guid? userId, Dictionary<string, object> request);

    /// <summary>
    /// Updates, via PATCH, the system configuration.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="request"> The request that contains just the new system configuration information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<SystemConfigurationResponse>> PatchSystemConfigurationAsync(Dictionary<string, object> request);

    /// <summary>
    /// Updates, via PATCH, the tenant with the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="tenantId"> The Id of the tenant to update.</param>
    /// <param name="request"> The request that contains just the new tenant information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<TenantResponse>> PatchTenantAsync(Guid? tenantId, Dictionary<string, object> request);

    /// <summary>
    /// Updates, via PATCH, the theme with the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="themeId"> The Id of the theme to update.</param>
    /// <param name="request"> The request that contains just the new theme information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<ThemeResponse>> PatchThemeAsync(Guid? themeId, Dictionary<string, object> request);

    /// <summary>
    /// Updates, via PATCH, the user with the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userId"> The Id of the user to update.</param>
    /// <param name="request"> The request that contains just the new user information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<UserResponse>> PatchUserAsync(Guid? userId, Dictionary<string, object> request);

    /// <summary>
    /// Updates, via PATCH, the user action with the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userActionId"> The Id of the user action to update.</param>
    /// <param name="request"> The request that contains just the new user action information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<UserActionResponse>> PatchUserActionAsync(Guid? userActionId, Dictionary<string, object> request);

    /// <summary>
    /// Updates, via PATCH, the user action reason with the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userActionReasonId"> The Id of the user action reason to update.</param>
    /// <param name="request"> The request that contains just the new user action reason information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<UserActionReasonResponse>> PatchUserActionReasonAsync(Guid? userActionReasonId, Dictionary<string, object> request);

    /// <summary>
    /// Updates, via PATCH, a single User consent by Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userConsentId"> The User Consent Id</param>
    /// <param name="request"> The request that contains just the new user consent information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<UserConsentResponse>> PatchUserConsentAsync(Guid? userConsentId, Dictionary<string, object> request);

    /// <summary>
    /// Reactivates the application with the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="applicationId"> The Id of the application to reactivate.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<ApplicationResponse>> ReactivateApplicationAsync(Guid? applicationId);

    /// <summary>
    /// Reactivates the user with the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userId"> The Id of the user to reactivate.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<UserResponse>> ReactivateUserAsync(Guid? userId);

    /// <summary>
    /// Reactivates the user action with the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userActionId"> The Id of the user action to reactivate.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<UserActionResponse>> ReactivateUserActionAsync(Guid? userActionId);

    /// <summary>
    /// Reconcile a User to FusionAuth using JWT issued from another Identity Provider.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="request"> The reconcile request that contains the data to reconcile the User.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<LoginResponse>> ReconcileJWTAsync(IdentityProviderLoginRequest request);

    /// <summary>
    /// Request a refresh of the User search index. This API is not generally necessary and the search index will become consistent in a
    /// reasonable amount of time. There may be scenarios where you may wish to manually request an index refresh. One example may be 
    /// if you are using the Search API or Delete Tenant API immediately following a User Create etc, you may wish to request a refresh to
    ///  ensure the index immediately current before making a query request to the search index.
    /// This is an asynchronous method.
    /// </summary>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> RefreshUserSearchIndexAsync();

    /// <summary>
    /// Registers a user for an application. If you provide the User and the UserRegistration object on this request, it
    /// will create the user as well as register them for the application. This is called a Full Registration. However, if
    /// you only provide the UserRegistration object, then the user must already exist and they will be registered for the
    /// application. The user id can also be provided and it will either be used to look up an existing user or it will be
    /// used for the newly created User.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userId"> (Optional) The Id of the user being registered for the application and optionally created.</param>
    /// <param name="request"> The request that optionally contains the User and must contain the UserRegistration.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RegistrationResponse>> RegisterAsync(Guid? userId, RegistrationRequest request);

    /// <summary>
    /// Removes a user from the family with the given id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="familyId"> The id of the family to remove the user from.</param>
    /// <param name="userId"> The id of the user to remove from the family.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> RemoveUserFromFamilyAsync(Guid? familyId, Guid? userId);

    /// <summary>
    /// Re-sends the verification email to the user.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="email"> The email address of the user that needs a new verification email.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<VerifyEmailResponse>> ResendEmailVerificationAsync(string email);

    /// <summary>
    /// Re-sends the verification email to the user. If the Application has configured a specific email template this will be used
    /// instead of the tenant configuration.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="applicationId"> The unique Application Id to used to resolve an application specific email template.</param>
    /// <param name="email"> The email address of the user that needs a new verification email.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<VerifyEmailResponse>> ResendEmailVerificationWithApplicationTemplateAsync(Guid? applicationId, string email);

    /// <summary>
    /// Re-sends the application registration verification email to the user.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="email"> The email address of the user that needs a new verification email.</param>
    /// <param name="applicationId"> The Id of the application to be verified.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<VerifyRegistrationResponse>> ResendRegistrationVerificationAsync(string email, Guid? applicationId);

    /// <summary>
    /// Retrieves a single action log (the log of a user action that was taken on a user previously) for the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="actionId"> The Id of the action to retrieve.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<ActionResponse>> RetrieveActionAsync(Guid? actionId);

    /// <summary>
    /// Retrieves all of the actions for the user with the given Id. This will return all time based actions that are active,
    /// and inactive as well as non-time based actions.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userId"> The Id of the user to fetch the actions for.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<ActionResponse>> RetrieveActionsAsync(Guid? userId);

    /// <summary>
    /// Retrieves all of the actions for the user with the given Id that are currently preventing the User from logging in.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userId"> The Id of the user to fetch the actions for.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<ActionResponse>> RetrieveActionsPreventingLoginAsync(Guid? userId);

    /// <summary>
    /// Retrieves all of the actions for the user with the given Id that are currently active.
    /// An active action means one that is time based and has not been canceled, and has not ended.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userId"> The Id of the user to fetch the actions for.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<ActionResponse>> RetrieveActiveActionsAsync(Guid? userId);

    /// <summary>
    /// Retrieves the application for the given id or all of the applications if the id is null.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="applicationId"> (Optional) The application id.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<ApplicationResponse>> RetrieveApplicationAsync(Guid? applicationId);

    /// <summary>
    /// Retrieves all of the applications.
    /// This is an asynchronous method.
    /// </summary>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<ApplicationResponse>> RetrieveApplicationsAsync();

    /// <summary>
    /// Retrieves a single audit log for the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="auditLogId"> The Id of the audit log to retrieve.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<AuditLogResponse>> RetrieveAuditLogAsync(int? auditLogId);

    /// <summary>
    /// Retrieves the connector with the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="connectorId"> The Id of the connector.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<ConnectorResponse>> RetrieveConnectorAsync(Guid? connectorId);

    /// <summary>
    /// Retrieves all of the connectors.
    /// This is an asynchronous method.
    /// </summary>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<ConnectorResponse>> RetrieveConnectorsAsync();

    /// <summary>
    /// Retrieves the Consent for the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="consentId"> The Id of the consent.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<ConsentResponse>> RetrieveConsentAsync(Guid? consentId);

    /// <summary>
    /// Retrieves all of the consent.
    /// This is an asynchronous method.
    /// </summary>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<ConsentResponse>> RetrieveConsentsAsync();

    /// <summary>
    /// Retrieves the daily active user report between the two instants. If you specify an application id, it will only
    /// return the daily active counts for that application.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="applicationId"> (Optional) The application id.</param>
    /// <param name="start"> The start instant as UTC milliseconds since Epoch.</param>
    /// <param name="end"> The end instant as UTC milliseconds since Epoch.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<DailyActiveUserReportResponse>> RetrieveDailyActiveReportAsync(Guid? applicationId, long? start, long? end);

    /// <summary>
    /// Retrieves the email template for the given Id. If you don't specify the id, this will return all of the email templates.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="emailTemplateId"> (Optional) The Id of the email template.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<EmailTemplateResponse>> RetrieveEmailTemplateAsync(Guid? emailTemplateId);

    /// <summary>
    /// Creates a preview of the email template provided in the request. This allows you to preview an email template that
    /// hasn't been saved to the database yet. The entire email template does not need to be provided on the request. This
    /// will create the preview based on whatever is given.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="request"> The request that contains the email template and optionally a locale to render it in.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<PreviewResponse>> RetrieveEmailTemplatePreviewAsync(PreviewRequest request);

    /// <summary>
    /// Retrieves all of the email templates.
    /// This is an asynchronous method.
    /// </summary>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<EmailTemplateResponse>> RetrieveEmailTemplatesAsync();

    /// <summary>
    /// Retrieves a single event log for the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="eventLogId"> The Id of the event log to retrieve.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<EventLogResponse>> RetrieveEventLogAsync(int? eventLogId);

    /// <summary>
    /// Retrieves all of the families that a user belongs to.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userId"> The User's id</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<FamilyResponse>> RetrieveFamiliesAsync(Guid? userId);

    /// <summary>
    /// Retrieves all of the members of a family by the unique Family Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="familyId"> The unique Id of the Family.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<FamilyResponse>> RetrieveFamilyMembersByFamilyIdAsync(Guid? familyId);

    /// <summary>
    /// Retrieves the form with the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="formId"> The Id of the form.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<FormResponse>> RetrieveFormAsync(Guid? formId);

    /// <summary>
    /// Retrieves the form field with the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="fieldId"> The Id of the form field.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<FormFieldResponse>> RetrieveFormFieldAsync(Guid? fieldId);

    /// <summary>
    /// Retrieves all of the forms fields
    /// This is an asynchronous method.
    /// </summary>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<FormFieldResponse>> RetrieveFormFieldsAsync();

    /// <summary>
    /// Retrieves all of the forms.
    /// This is an asynchronous method.
    /// </summary>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<FormResponse>> RetrieveFormsAsync();

    /// <summary>
    /// Retrieves the group for the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="groupId"> The Id of the group.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<GroupResponse>> RetrieveGroupAsync(Guid? groupId);

    /// <summary>
    /// Retrieves all of the groups.
    /// This is an asynchronous method.
    /// </summary>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<GroupResponse>> RetrieveGroupsAsync();

    /// <summary>
    /// Retrieves the identity provider for the given id or all of the identity providers if the id is null.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="identityProviderId"> (Optional) The identity provider id.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<IdentityProviderResponse>> RetrieveIdentityProviderAsync(Guid? identityProviderId);

    /// <summary>
    /// Retrieves all of the identity providers.
    /// This is an asynchronous method.
    /// </summary>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<IdentityProviderResponse>> RetrieveIdentityProvidersAsync();

    /// <summary>
    /// Retrieves all of the actions for the user with the given Id that are currently inactive.
    /// An inactive action means one that is time based and has been canceled or has expired, or is not time based.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userId"> The Id of the user to fetch the actions for.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<ActionResponse>> RetrieveInactiveActionsAsync(Guid? userId);

    /// <summary>
    /// Retrieves all of the applications that are currently inactive.
    /// This is an asynchronous method.
    /// </summary>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<ApplicationResponse>> RetrieveInactiveApplicationsAsync();

    /// <summary>
    /// Retrieves all of the user actions that are currently inactive.
    /// This is an asynchronous method.
    /// </summary>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<UserActionResponse>> RetrieveInactiveUserActionsAsync();

    /// <summary>
    /// Retrieves the available integrations.
    /// This is an asynchronous method.
    /// </summary>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<IntegrationResponse>> RetrieveIntegrationAsync();

    /// <summary>
    /// Retrieves the Public Key configured for verifying JSON Web Tokens (JWT) by the key Id (kid).
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="keyId"> The Id of the public key (kid).</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<PublicKeyResponse>> RetrieveJWTPublicKeyAsync(string keyId);

    /// <summary>
    /// Retrieves the Public Key configured for verifying the JSON Web Tokens (JWT) issued by the Login API by the Application Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="applicationId"> The Id of the Application for which this key is used.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<PublicKeyResponse>> RetrieveJWTPublicKeyByApplicationIdAsync(string applicationId);

    /// <summary>
    /// Retrieves all Public Keys configured for verifying JSON Web Tokens (JWT).
    /// This is an asynchronous method.
    /// </summary>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<PublicKeyResponse>> RetrieveJWTPublicKeysAsync();

    /// <summary>
    /// Returns public keys used by FusionAuth to cryptographically verify JWTs using the JSON Web Key format.
    /// This is an asynchronous method.
    /// </summary>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<JWKSResponse>> RetrieveJsonWebKeySetAsync();

    /// <summary>
    /// Retrieves the key for the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="keyId"> The Id of the key.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<KeyResponse>> RetrieveKeyAsync(Guid? keyId);

    /// <summary>
    /// Retrieves all of the keys.
    /// This is an asynchronous method.
    /// </summary>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<KeyResponse>> RetrieveKeysAsync();

    /// <summary>
    /// Retrieves the lambda for the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="lambdaId"> The Id of the lambda.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<LambdaResponse>> RetrieveLambdaAsync(Guid? lambdaId);

    /// <summary>
    /// Retrieves all of the lambdas.
    /// This is an asynchronous method.
    /// </summary>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<LambdaResponse>> RetrieveLambdasAsync();

    /// <summary>
    /// Retrieves all of the lambdas for the provided type.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="type"> The type of the lambda to return.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<LambdaResponse>> RetrieveLambdasByTypeAsync(LambdaType type);

    /// <summary>
    /// Retrieves the login report between the two instants. If you specify an application id, it will only return the
    /// login counts for that application.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="applicationId"> (Optional) The application id.</param>
    /// <param name="start"> The start instant as UTC milliseconds since Epoch.</param>
    /// <param name="end"> The end instant as UTC milliseconds since Epoch.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<LoginReportResponse>> RetrieveLoginReportAsync(Guid? applicationId, long? start, long? end);

    /// <summary>
    /// Retrieves the monthly active user report between the two instants. If you specify an application id, it will only
    /// return the monthly active counts for that application.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="applicationId"> (Optional) The application id.</param>
    /// <param name="start"> The start instant as UTC milliseconds since Epoch.</param>
    /// <param name="end"> The end instant as UTC milliseconds since Epoch.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<MonthlyActiveUserReportResponse>> RetrieveMonthlyActiveReportAsync(Guid? applicationId, long? start, long? end);

    /// <summary>
    /// Retrieves the Oauth2 configuration for the application for the given Application Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="applicationId"> The Id of the Application to retrieve OAuth configuration.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<OAuthConfigurationResponse>> RetrieveOauthConfigurationAsync(Guid? applicationId);

    /// <summary>
    /// Returns the well known OpenID Configuration JSON document
    /// This is an asynchronous method.
    /// </summary>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<OpenIdConfiguration>> RetrieveOpenIdConfigurationAsync();

    /// <summary>
    /// Retrieves the password validation rules for a specific tenant. This method requires a tenantId to be provided 
    /// through the use of a Tenant scoped API key or an HTTP header X-FusionAuth-TenantId to specify the Tenant Id.
    /// 
    /// This API does not require an API key.
    /// This is an asynchronous method.
    /// </summary>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<PasswordValidationRulesResponse>> RetrievePasswordValidationRulesAsync();

    /// <summary>
    /// Retrieves the password validation rules for a specific tenant.
    /// 
    /// This API does not require an API key.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="tenantId"> The Id of the tenant.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<PasswordValidationRulesResponse>> RetrievePasswordValidationRulesWithTenantIdAsync(Guid? tenantId);

    /// <summary>
    /// Retrieves all of the children for the given parent email address.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="parentEmail"> The email of the parent.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<PendingResponse>> RetrievePendingChildrenAsync(string parentEmail);

    /// <summary>
    /// Retrieves the last number of login records.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="offset"> The initial record. e.g. 0 is the last login, 100 will be the 100th most recent login.</param>
    /// <param name="limit"> (Optional, defaults to 10) The number of records to retrieve.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RecentLoginResponse>> RetrieveRecentLoginsAsync(int? offset, int? limit);

    /// <summary>
    /// Retrieves the refresh tokens that belong to the user with the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userId"> The Id of the user.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RefreshResponse>> RetrieveRefreshTokensAsync(Guid? userId);

    /// <summary>
    /// Retrieves the user registration for the user with the given id and the given application id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userId"> The Id of the user.</param>
    /// <param name="applicationId"> The Id of the application.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RegistrationResponse>> RetrieveRegistrationAsync(Guid? userId, Guid? applicationId);

    /// <summary>
    /// Retrieves the registration report between the two instants. If you specify an application id, it will only return
    /// the registration counts for that application.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="applicationId"> (Optional) The application id.</param>
    /// <param name="start"> The start instant as UTC milliseconds since Epoch.</param>
    /// <param name="end"> The end instant as UTC milliseconds since Epoch.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RegistrationReportResponse>> RetrieveRegistrationReportAsync(Guid? applicationId, long? start, long? end);

    /// <summary>
    /// Retrieves the system configuration.
    /// This is an asynchronous method.
    /// </summary>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<SystemConfigurationResponse>> RetrieveSystemConfigurationAsync();

    /// <summary>
    /// Retrieves the tenant for the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="tenantId"> The Id of the tenant.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<TenantResponse>> RetrieveTenantAsync(Guid? tenantId);

    /// <summary>
    /// Retrieves all of the tenants.
    /// This is an asynchronous method.
    /// </summary>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<TenantResponse>> RetrieveTenantsAsync();

    /// <summary>
    /// Retrieves the theme for the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="themeId"> The Id of the theme.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<ThemeResponse>> RetrieveThemeAsync(Guid? themeId);

    /// <summary>
    /// Retrieves all of the themes.
    /// This is an asynchronous method.
    /// </summary>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<ThemeResponse>> RetrieveThemesAsync();

    /// <summary>
    /// Retrieves the totals report. This contains all of the total counts for each application and the global registration
    /// count.
    /// This is an asynchronous method.
    /// </summary>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<TotalsReportResponse>> RetrieveTotalReportAsync();

    /// <summary>
    /// Retrieves the user for the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userId"> The Id of the user.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<UserResponse>> RetrieveUserAsync(Guid? userId);

    /// <summary>
    /// Retrieves the user action for the given Id. If you pass in null for the id, this will return all of the user
    /// actions.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userActionId"> (Optional) The Id of the user action.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<UserActionResponse>> RetrieveUserActionAsync(Guid? userActionId);

    /// <summary>
    /// Retrieves the user action reason for the given Id. If you pass in null for the id, this will return all of the user
    /// action reasons.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userActionReasonId"> (Optional) The Id of the user action reason.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<UserActionReasonResponse>> RetrieveUserActionReasonAsync(Guid? userActionReasonId);

    /// <summary>
    /// Retrieves all the user action reasons.
    /// This is an asynchronous method.
    /// </summary>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<UserActionReasonResponse>> RetrieveUserActionReasonsAsync();

    /// <summary>
    /// Retrieves all of the user actions.
    /// This is an asynchronous method.
    /// </summary>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<UserActionResponse>> RetrieveUserActionsAsync();

    /// <summary>
    /// Retrieves the user by a change password Id. The intended use of this API is to retrieve a user after the forgot
    /// password workflow has been initiated and you may not know the user's email or username.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="changePasswordId"> The unique change password Id that was sent via email or returned by the Forgot Password API.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<UserResponse>> RetrieveUserByChangePasswordIdAsync(string changePasswordId);

    /// <summary>
    /// Retrieves the user for the given email.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="email"> The email of the user.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<UserResponse>> RetrieveUserByEmailAsync(string email);

    /// <summary>
    /// Retrieves the user for the loginId. The loginId can be either the username or the email.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="loginId"> The email or username of the user.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<UserResponse>> RetrieveUserByLoginIdAsync(string loginId);

    /// <summary>
    /// Retrieves the user for the given username.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="username"> The username of the user.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<UserResponse>> RetrieveUserByUsernameAsync(string username);

    /// <summary>
    /// Retrieves the user by a verificationId. The intended use of this API is to retrieve a user after the forgot
    /// password workflow has been initiated and you may not know the user's email or username.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="verificationId"> The unique verification Id that has been set on the user object.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<UserResponse>> RetrieveUserByVerificationIdAsync(string verificationId);

    /// <summary>
    /// Retrieves all of the comments for the user with the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userId"> The Id of the user.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<UserCommentResponse>> RetrieveUserCommentsAsync(Guid? userId);

    /// <summary>
    /// Retrieve a single User consent by Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userConsentId"> The User consent Id</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<UserConsentResponse>> RetrieveUserConsentAsync(Guid? userConsentId);

    /// <summary>
    /// Retrieves all of the consents for a User.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userId"> The User's Id</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<UserConsentResponse>> RetrieveUserConsentsAsync(Guid? userId);

    /// <summary>
    /// Call the UserInfo endpoint to retrieve User Claims from the access token issued by FusionAuth.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="encodedJWT"> The encoded JWT (access token).</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<UserResponse>> RetrieveUserInfoFromAccessTokenAsync(string encodedJWT);

    /// <summary>
    /// Retrieves the login report between the two instants for a particular user by Id. If you specify an application id, it will only return the
    /// login counts for that application.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="applicationId"> (Optional) The application id.</param>
    /// <param name="userId"> The userId id.</param>
    /// <param name="start"> The start instant as UTC milliseconds since Epoch.</param>
    /// <param name="end"> The end instant as UTC milliseconds since Epoch.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<LoginReportResponse>> RetrieveUserLoginReportAsync(Guid? applicationId, Guid? userId, long? start, long? end);

    /// <summary>
    /// Retrieves the login report between the two instants for a particular user by login Id. If you specify an application id, it will only return the
    /// login counts for that application.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="applicationId"> (Optional) The application id.</param>
    /// <param name="loginId"> The userId id.</param>
    /// <param name="start"> The start instant as UTC milliseconds since Epoch.</param>
    /// <param name="end"> The end instant as UTC milliseconds since Epoch.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<LoginReportResponse>> RetrieveUserLoginReportByLoginIdAsync(Guid? applicationId, string loginId, long? start, long? end);

    /// <summary>
    /// Retrieves the last number of login records for a user.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userId"> The Id of the user.</param>
    /// <param name="offset"> The initial record. e.g. 0 is the last login, 100 will be the 100th most recent login.</param>
    /// <param name="limit"> (Optional, defaults to 10) The number of records to retrieve.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RecentLoginResponse>> RetrieveUserRecentLoginsAsync(Guid? userId, int? offset, int? limit);

    /// <summary>
    /// Retrieves the user for the given Id. This method does not use an API key, instead it uses a JSON Web Token (JWT) for authentication.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="encodedJWT"> The encoded JWT (access token).</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<UserResponse>> RetrieveUserUsingJWTAsync(string encodedJWT);

    /// <summary>
    /// Retrieves the webhook for the given Id. If you pass in null for the id, this will return all the webhooks.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="webhookId"> (Optional) The Id of the webhook.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<WebhookResponse>> RetrieveWebhookAsync(Guid? webhookId);

    /// <summary>
    /// Retrieves all the webhooks.
    /// This is an asynchronous method.
    /// </summary>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<WebhookResponse>> RetrieveWebhooksAsync();

    /// <summary>
    /// Revokes a single refresh token, all tokens for a user or all tokens for an application. If you provide a user id
    /// and an application id, this will delete all the refresh tokens for that user for that application.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="token"> (Optional) The refresh token to delete.</param>
    /// <param name="userId"> (Optional) The user id whose tokens to delete.</param>
    /// <param name="applicationId"> (Optional) The application id of the tokens to delete.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> RevokeRefreshTokenAsync(string token, Guid? userId, Guid? applicationId);

    /// <summary>
    /// Revokes a single User consent by Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userConsentId"> The User Consent Id</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> RevokeUserConsentAsync(Guid? userConsentId);

    /// <summary>
    /// Searches the audit logs with the specified criteria and pagination.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="request"> The search criteria and pagination information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<AuditLogSearchResponse>> SearchAuditLogsAsync(AuditLogSearchRequest request);

    /// <summary>
    /// Searches the event logs with the specified criteria and pagination.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="request"> The search criteria and pagination information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<EventLogSearchResponse>> SearchEventLogsAsync(EventLogSearchRequest request);

    /// <summary>
    /// Searches the login records with the specified criteria and pagination.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="request"> The search criteria and pagination information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<LoginRecordSearchResponse>> SearchLoginRecordsAsync(LoginRecordSearchRequest request);

    /// <summary>
    /// Retrieves the users for the given ids. If any id is invalid, it is ignored.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="ids"> The user ids to search for.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    [Obsolete("This method has been renamed to SearchUsersByIdsAsync, use that method instead.")]
    Task<ClientResponse<SearchResponse>> SearchUsersAsync(List<string> ids);

    /// <summary>
    /// Retrieves the users for the given ids. If any id is invalid, it is ignored.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="ids"> The user ids to search for.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<SearchResponse>> SearchUsersByIdsAsync(List<string> ids);

    /// <summary>
    /// Retrieves the users for the given search criteria and pagination.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="request"> The search criteria and pagination constraints. Fields used: ids, query, queryString, numberOfResults, orderBy, startRow,
    /// and sortFields.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<SearchResponse>> SearchUsersByQueryAsync(SearchRequest request);

    /// <summary>
    /// Retrieves the users for the given search criteria and pagination.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="request"> The search criteria and pagination constraints. Fields used: ids, query, queryString, numberOfResults, orderBy, startRow,
    /// and sortFields.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    [Obsolete("This method has been renamed to SearchUsersByQueryAsync, use that method instead.")]
    Task<ClientResponse<SearchResponse>> SearchUsersByQueryStringAsync(SearchRequest request);

    /// <summary>
    /// Send an email using an email template id. You can optionally provide <code>requestData</code> to access key value
    /// pairs in the email template.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="emailTemplateId"> The id for the template.</param>
    /// <param name="request"> The send email request that contains all of the information used to send the email.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<SendResponse>> SendEmailAsync(Guid? emailTemplateId, SendRequest request);

    /// <summary>
    /// Sends out an email to a parent that they need to register and create a family or need to log in and add a child to their existing family.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="request"> The request object that contains the parent email.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> SendFamilyRequestEmailAsync(FamilyEmailRequest request);

    /// <summary>
    /// Send a passwordless authentication code in an email to complete login.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="request"> The passwordless send request that contains all of the information used to send an email containing a code.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> SendPasswordlessCodeAsync(PasswordlessSendRequest request);

    /// <summary>
    /// Send a Two Factor authentication code to assist in setting up Two Factor authentication or disabling.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="request"> The request object that contains all of the information used to send the code.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> SendTwoFactorCodeAsync(TwoFactorSendRequest request);

    /// <summary>
    /// Send a Two Factor authentication code to allow the completion of Two Factor authentication.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="twoFactorId"> The Id returned by the Login API necessary to complete Two Factor authentication.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> SendTwoFactorCodeForLoginAsync(string twoFactorId);

    /// <summary>
    /// Begins a login request for a 3rd party login that requires user interaction such as HYPR.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="request"> The third-party login request that contains information from the third-party login
    /// providers that FusionAuth uses to reconcile the user's account.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<IdentityProviderStartLoginResponse>> StartIdentityProviderLoginAsync(IdentityProviderStartLoginRequest request);

    /// <summary>
    /// Start a passwordless login request by generating a passwordless code. This code can be sent to the User using the Send
    /// Passwordless Code API or using a mechanism outside of FusionAuth. The passwordless login is completed by using the Passwordless Login API with this code.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="request"> The passwordless start request that contains all of the information used to begin the passwordless login request.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<PasswordlessStartResponse>> StartPasswordlessLoginAsync(PasswordlessStartRequest request);

    /// <summary>
    /// Complete login using a 2FA challenge
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="request"> The login request that contains the user credentials used to log them in.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<LoginResponse>> TwoFactorLoginAsync(TwoFactorLoginRequest request);

    /// <summary>
    /// Updates the application with the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="applicationId"> The Id of the application to update.</param>
    /// <param name="request"> The request that contains all of the new application information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<ApplicationResponse>> UpdateApplicationAsync(Guid? applicationId, ApplicationRequest request);

    /// <summary>
    /// Updates the application role with the given id for the application.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="applicationId"> The Id of the application that the role belongs to.</param>
    /// <param name="roleId"> The Id of the role to update.</param>
    /// <param name="request"> The request that contains all of the new role information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<ApplicationResponse>> UpdateApplicationRoleAsync(Guid? applicationId, Guid? roleId, ApplicationRequest request);

    /// <summary>
    /// Updates the connector with the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="connectorId"> The Id of the connector to update.</param>
    /// <param name="request"> The request object that contains all of the new connector information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<ConnectorResponse>> UpdateConnectorAsync(Guid? connectorId, ConnectorRequest request);

    /// <summary>
    /// Updates the consent with the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="consentId"> The Id of the consent to update.</param>
    /// <param name="request"> The request that contains all of the new consent information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<ConsentResponse>> UpdateConsentAsync(Guid? consentId, ConsentRequest request);

    /// <summary>
    /// Updates the email template with the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="emailTemplateId"> The Id of the email template to update.</param>
    /// <param name="request"> The request that contains all of the new email template information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<EmailTemplateResponse>> UpdateEmailTemplateAsync(Guid? emailTemplateId, EmailTemplateRequest request);

    /// <summary>
    /// Updates the form with the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="formId"> The Id of the form to update.</param>
    /// <param name="request"> The request object that contains all of the new form information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<FormResponse>> UpdateFormAsync(Guid? formId, FormRequest request);

    /// <summary>
    /// Updates the form field with the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="fieldId"> The Id of the form field to update.</param>
    /// <param name="request"> The request object that contains all of the new form field information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<FormFieldResponse>> UpdateFormFieldAsync(Guid? fieldId, FormFieldRequest request);

    /// <summary>
    /// Updates the group with the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="groupId"> The Id of the group to update.</param>
    /// <param name="request"> The request that contains all of the new group information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<GroupResponse>> UpdateGroupAsync(Guid? groupId, GroupRequest request);

    /// <summary>
    /// Updates the identity provider with the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="identityProviderId"> The Id of the identity provider to update.</param>
    /// <param name="request"> The request object that contains the updated identity provider.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<IdentityProviderResponse>> UpdateIdentityProviderAsync(Guid? identityProviderId, IdentityProviderRequest request);

    /// <summary>
    /// Updates the available integrations.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="request"> The request that contains all of the new integration information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<IntegrationResponse>> UpdateIntegrationsAsync(IntegrationRequest request);

    /// <summary>
    /// Updates the key with the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="keyId"> The Id of the key to update.</param>
    /// <param name="request"> The request that contains all of the new key information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<KeyResponse>> UpdateKeyAsync(Guid? keyId, KeyRequest request);

    /// <summary>
    /// Updates the lambda with the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="lambdaId"> The Id of the lambda to update.</param>
    /// <param name="request"> The request that contains all of the new lambda information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<LambdaResponse>> UpdateLambdaAsync(Guid? lambdaId, LambdaRequest request);

    /// <summary>
    /// Updates the registration for the user with the given id and the application defined in the request.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userId"> The Id of the user whose registration is going to be updated.</param>
    /// <param name="request"> The request that contains all of the new registration information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RegistrationResponse>> UpdateRegistrationAsync(Guid? userId, RegistrationRequest request);

    /// <summary>
    /// Updates the system configuration.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="request"> The request that contains all of the new system configuration information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<SystemConfigurationResponse>> UpdateSystemConfigurationAsync(SystemConfigurationRequest request);

    /// <summary>
    /// Updates the tenant with the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="tenantId"> The Id of the tenant to update.</param>
    /// <param name="request"> The request that contains all of the new tenant information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<TenantResponse>> UpdateTenantAsync(Guid? tenantId, TenantRequest request);

    /// <summary>
    /// Updates the theme with the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="themeId"> The Id of the theme to update.</param>
    /// <param name="request"> The request that contains all of the new theme information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<ThemeResponse>> UpdateThemeAsync(Guid? themeId, ThemeRequest request);

    /// <summary>
    /// Updates the user with the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userId"> The Id of the user to update.</param>
    /// <param name="request"> The request that contains all of the new user information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<UserResponse>> UpdateUserAsync(Guid? userId, UserRequest request);

    /// <summary>
    /// Updates the user action with the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userActionId"> The Id of the user action to update.</param>
    /// <param name="request"> The request that contains all of the new user action information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<UserActionResponse>> UpdateUserActionAsync(Guid? userActionId, UserActionRequest request);

    /// <summary>
    /// Updates the user action reason with the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userActionReasonId"> The Id of the user action reason to update.</param>
    /// <param name="request"> The request that contains all of the new user action reason information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<UserActionReasonResponse>> UpdateUserActionReasonAsync(Guid? userActionReasonId, UserActionReasonRequest request);

    /// <summary>
    /// Updates a single User consent by Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="userConsentId"> The User Consent Id</param>
    /// <param name="request"> The request that contains the user consent information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<UserConsentResponse>> UpdateUserConsentAsync(Guid? userConsentId, UserConsentRequest request);

    /// <summary>
    /// Updates the webhook with the given Id.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="webhookId"> The Id of the webhook to update.</param>
    /// <param name="request"> The request that contains all of the new webhook information.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<WebhookResponse>> UpdateWebhookAsync(Guid? webhookId, WebhookRequest request);

    /// <summary>
    /// Validates the end-user provided user_code from the user-interaction of the Device Authorization Grant.
    /// If you build your own activation form you should validate the user provided code prior to beginning the Authorization grant.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="user_code"> The end-user verification code.</param>
    /// <param name="client_id"> The client id.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> ValidateDeviceAsync(string user_code, string client_id);

    /// <summary>
    /// Validates the provided JWT (encoded JWT string) to ensure the token is valid. A valid access token is properly
    /// signed and not expired.
    /// <p>
    /// This API may be used to verify the JWT as well as decode the encoded JWT into human readable identity claims.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="encodedJWT"> The encoded JWT (access token).</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<ValidateResponse>> ValidateJWTAsync(string encodedJWT);

    /// <summary>
    /// Confirms a email verification. The Id given is usually from an email sent to the user.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="verificationId"> The email verification id sent to the user.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> VerifyEmailAsync(string verificationId);

    /// <summary>
    /// Confirms an application registration. The Id given is usually from an email sent to the user.
    /// This is an asynchronous method.
    /// </summary>
    /// <param name="verificationId"> The registration verification Id sent to the user.</param>
    /// <returns>
    /// When successful, the response will contain the log of the action. If there was a validation error or any
    /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
    /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
    /// IOException.
    /// </returns>
    Task<ClientResponse<RESTVoid>> VerifyRegistrationAsync(string verificationId);
  }

 public interface IFusionAuthSyncClient {

   /// <summary>
   /// Takes an action on a user. The user being actioned is called the "actionee" and the user taking the action is called the
   /// "actioner". Both user ids are required in the request object.
   /// </summary>
   /// <param name="request"> The action request that includes all of the information about the action being taken including
    /// the id of the action, any options and the duration (if applicable).</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<ActionResponse> ActionUser(ActionRequest request);

   /// <summary>
   /// Adds a user to an existing family. The family id must be specified.
   /// </summary>
   /// <param name="familyId"> The id of the family.</param>
   /// <param name="request"> The request object that contains all of the information used to determine which user to add to the family.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<FamilyResponse> AddUserToFamily(Guid? familyId, FamilyRequest request);

   /// <summary>
   /// Cancels the user action.
   /// </summary>
   /// <param name="actionId"> The action id of the action to cancel.</param>
   /// <param name="request"> The action request that contains the information about the cancellation.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<ActionResponse> CancelAction(Guid? actionId, ActionRequest request);

   /// <summary>
   /// Changes a user's password using the change password Id. This usually occurs after an email has been sent to the user
   /// and they clicked on a link to reset their password.
   /// </summary>
   /// <param name="changePasswordId"> The change password Id used to find the user. This value is generated by FusionAuth once the change password workflow has been initiated.</param>
   /// <param name="request"> The change password request that contains all of the information used to change the password.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<ChangePasswordResponse> ChangePassword(string changePasswordId, ChangePasswordRequest request);

   /// <summary>
   /// Changes a user's password using their identity (login id and password). Using a loginId instead of the changePasswordId
   /// bypasses the email verification and allows a password to be changed directly without first calling the #forgotPassword
   /// method.
   /// </summary>
   /// <param name="request"> The change password request that contains all of the information used to change the password.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> ChangePasswordByIdentity(ChangePasswordRequest request);

   /// <summary>
   /// Adds a comment to the user's account.
   /// </summary>
   /// <param name="request"> The request object that contains all of the information used to create the user comment.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> CommentOnUser(UserCommentRequest request);

   /// <summary>
   /// Creates an application. You can optionally specify an Id for the application, if not provided one will be generated.
   /// </summary>
   /// <param name="applicationId"> (Optional) The Id to use for the application. If not provided a secure random UUID will be generated.</param>
   /// <param name="request"> The request object that contains all of the information used to create the application.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<ApplicationResponse> CreateApplication(Guid? applicationId, ApplicationRequest request);

   /// <summary>
   /// Creates a new role for an application. You must specify the id of the application you are creating the role for.
   /// You can optionally specify an Id for the role inside the ApplicationRole object itself, if not provided one will be generated.
   /// </summary>
   /// <param name="applicationId"> The Id of the application to create the role on.</param>
   /// <param name="roleId"> (Optional) The Id of the role. If not provided a secure random UUID will be generated.</param>
   /// <param name="request"> The request object that contains all of the information used to create the application role.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<ApplicationResponse> CreateApplicationRole(Guid? applicationId, Guid? roleId, ApplicationRequest request);

   /// <summary>
   /// Creates an audit log with the message and user name (usually an email). Audit logs should be written anytime you
   /// make changes to the FusionAuth database. When using the FusionAuth App web interface, any changes are automatically
   /// written to the audit log. However, if you are accessing the API, you must write the audit logs yourself.
   /// </summary>
   /// <param name="request"> The request object that contains all of the information used to create the audit log entry.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<AuditLogResponse> CreateAuditLog(AuditLogRequest request);

   /// <summary>
   /// Creates a connector.  You can optionally specify an Id for the connector, if not provided one will be generated.
   /// </summary>
   /// <param name="connectorId"> (Optional) The Id for the connector. If not provided a secure random UUID will be generated.</param>
   /// <param name="request"> The request object that contains all of the information used to create the connector.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<ConnectorResponse> CreateConnector(Guid? connectorId, ConnectorRequest request);

   /// <summary>
   /// Creates a user consent type. You can optionally specify an Id for the consent type, if not provided one will be generated.
   /// </summary>
   /// <param name="consentId"> (Optional) The Id for the consent. If not provided a secure random UUID will be generated.</param>
   /// <param name="request"> The request object that contains all of the information used to create the consent.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<ConsentResponse> CreateConsent(Guid? consentId, ConsentRequest request);

   /// <summary>
   /// Creates an email template. You can optionally specify an Id for the template, if not provided one will be generated.
   /// </summary>
   /// <param name="emailTemplateId"> (Optional) The Id for the template. If not provided a secure random UUID will be generated.</param>
   /// <param name="request"> The request object that contains all of the information used to create the email template.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<EmailTemplateResponse> CreateEmailTemplate(Guid? emailTemplateId, EmailTemplateRequest request);

   /// <summary>
   /// Creates a family with the user id in the request as the owner and sole member of the family. You can optionally specify an id for the
   /// family, if not provided one will be generated.
   /// </summary>
   /// <param name="familyId"> (Optional) The id for the family. If not provided a secure random UUID will be generated.</param>
   /// <param name="request"> The request object that contains all of the information used to create the family.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<FamilyResponse> CreateFamily(Guid? familyId, FamilyRequest request);

   /// <summary>
   /// Creates a form.  You can optionally specify an Id for the form, if not provided one will be generated.
   /// </summary>
   /// <param name="formId"> (Optional) The Id for the form. If not provided a secure random UUID will be generated.</param>
   /// <param name="request"> The request object that contains all of the information used to create the form.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<FormResponse> CreateForm(Guid? formId, FormRequest request);

   /// <summary>
   /// Creates a form field.  You can optionally specify an Id for the form, if not provided one will be generated.
   /// </summary>
   /// <param name="fieldId"> (Optional) The Id for the form field. If not provided a secure random UUID will be generated.</param>
   /// <param name="request"> The request object that contains all of the information used to create the form field.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<FormFieldResponse> CreateFormField(Guid? fieldId, FormFieldRequest request);

   /// <summary>
   /// Creates a group. You can optionally specify an Id for the group, if not provided one will be generated.
   /// </summary>
   /// <param name="groupId"> (Optional) The Id for the group. If not provided a secure random UUID will be generated.</param>
   /// <param name="request"> The request object that contains all of the information used to create the group.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<GroupResponse> CreateGroup(Guid? groupId, GroupRequest request);

   /// <summary>
   /// Creates a member in a group.
   /// </summary>
   /// <param name="request"> The request object that contains all of the information used to create the group member(s).</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<MemberResponse> CreateGroupMembers(MemberRequest request);

   /// <summary>
   /// Creates an identity provider. You can optionally specify an Id for the identity provider, if not provided one will be generated.
   /// </summary>
   /// <param name="identityProviderId"> (Optional) The Id of the identity provider. If not provided a secure random UUID will be generated.</param>
   /// <param name="request"> The request object that contains all of the information used to create the identity provider.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<IdentityProviderResponse> CreateIdentityProvider(Guid? identityProviderId, IdentityProviderRequest request);

   /// <summary>
   /// Creates a Lambda. You can optionally specify an Id for the lambda, if not provided one will be generated.
   /// </summary>
   /// <param name="lambdaId"> (Optional) The Id for the lambda. If not provided a secure random UUID will be generated.</param>
   /// <param name="request"> The request object that contains all of the information used to create the lambda.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<LambdaResponse> CreateLambda(Guid? lambdaId, LambdaRequest request);

   /// <summary>
   /// Creates a tenant. You can optionally specify an Id for the tenant, if not provided one will be generated.
   /// </summary>
   /// <param name="tenantId"> (Optional) The Id for the tenant. If not provided a secure random UUID will be generated.</param>
   /// <param name="request"> The request object that contains all of the information used to create the tenant.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<TenantResponse> CreateTenant(Guid? tenantId, TenantRequest request);

   /// <summary>
   /// Creates a Theme. You can optionally specify an Id for the theme, if not provided one will be generated.
   /// </summary>
   /// <param name="themeId"> (Optional) The Id for the theme. If not provided a secure random UUID will be generated.</param>
   /// <param name="request"> The request object that contains all of the information used to create the theme.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<ThemeResponse> CreateTheme(Guid? themeId, ThemeRequest request);

   /// <summary>
   /// Creates a user. You can optionally specify an Id for the user, if not provided one will be generated.
   /// </summary>
   /// <param name="userId"> (Optional) The Id for the user. If not provided a secure random UUID will be generated.</param>
   /// <param name="request"> The request object that contains all of the information used to create the user.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<UserResponse> CreateUser(Guid? userId, UserRequest request);

   /// <summary>
   /// Creates a user action. This action cannot be taken on a user until this call successfully returns. Anytime after
   /// that the user action can be applied to any user.
   /// </summary>
   /// <param name="userActionId"> (Optional) The Id for the user action. If not provided a secure random UUID will be generated.</param>
   /// <param name="request"> The request object that contains all of the information used to create the user action.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<UserActionResponse> CreateUserAction(Guid? userActionId, UserActionRequest request);

   /// <summary>
   /// Creates a user reason. This user action reason cannot be used when actioning a user until this call completes
   /// successfully. Anytime after that the user action reason can be used.
   /// </summary>
   /// <param name="userActionReasonId"> (Optional) The Id for the user action reason. If not provided a secure random UUID will be generated.</param>
   /// <param name="request"> The request object that contains all of the information used to create the user action reason.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<UserActionReasonResponse> CreateUserActionReason(Guid? userActionReasonId, UserActionReasonRequest request);

   /// <summary>
   /// Creates a single User consent.
   /// </summary>
   /// <param name="userConsentId"> (Optional) The Id for the User consent. If not provided a secure random UUID will be generated.</param>
   /// <param name="request"> The request that contains the user consent information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<UserConsentResponse> CreateUserConsent(Guid? userConsentId, UserConsentRequest request);

   /// <summary>
   /// Creates a webhook. You can optionally specify an Id for the webhook, if not provided one will be generated.
   /// </summary>
   /// <param name="webhookId"> (Optional) The Id for the webhook. If not provided a secure random UUID will be generated.</param>
   /// <param name="request"> The request object that contains all of the information used to create the webhook.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<WebhookResponse> CreateWebhook(Guid? webhookId, WebhookRequest request);

   /// <summary>
   /// Deactivates the application with the given Id.
   /// </summary>
   /// <param name="applicationId"> The Id of the application to deactivate.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> DeactivateApplication(Guid? applicationId);

   /// <summary>
   /// Deactivates the user with the given Id.
   /// </summary>
   /// <param name="userId"> The Id of the user to deactivate.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> DeactivateUser(Guid? userId);

   /// <summary>
   /// Deactivates the user action with the given Id.
   /// </summary>
   /// <param name="userActionId"> The Id of the user action to deactivate.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> DeactivateUserAction(Guid? userActionId);

   /// <summary>
   /// Deactivates the users with the given ids.
   /// </summary>
   /// <param name="userIds"> The ids of the users to deactivate.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   [Obsolete("This method has been renamed to DeactivateUsersByIdsAsync, use that method instead.")]
   ClientResponse<UserDeleteResponse> DeactivateUsers(List<string> userIds);

   /// <summary>
   /// Deactivates the users with the given ids.
   /// </summary>
   /// <param name="userIds"> The ids of the users to deactivate.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<UserDeleteResponse> DeactivateUsersByIds(List<string> userIds);

   /// <summary>
   /// Hard deletes an application. This is a dangerous operation and should not be used in most circumstances. This will
   /// delete the application, any registrations for that application, metrics and reports for the application, all the
   /// roles for the application, and any other data associated with the application. This operation could take a very
   /// long time, depending on the amount of data in your database.
   /// </summary>
   /// <param name="applicationId"> The Id of the application to delete.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> DeleteApplication(Guid? applicationId);

   /// <summary>
   /// Hard deletes an application role. This is a dangerous operation and should not be used in most circumstances. This
   /// permanently removes the given role from all users that had it.
   /// </summary>
   /// <param name="applicationId"> The Id of the application to deactivate.</param>
   /// <param name="roleId"> The Id of the role to delete.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> DeleteApplicationRole(Guid? applicationId, Guid? roleId);

   /// <summary>
   /// Deletes the connector for the given Id.
   /// </summary>
   /// <param name="connectorId"> The Id of the connector to delete.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> DeleteConnector(Guid? connectorId);

   /// <summary>
   /// Deletes the consent for the given Id.
   /// </summary>
   /// <param name="consentId"> The Id of the consent to delete.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> DeleteConsent(Guid? consentId);

   /// <summary>
   /// Deletes the email template for the given Id.
   /// </summary>
   /// <param name="emailTemplateId"> The Id of the email template to delete.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> DeleteEmailTemplate(Guid? emailTemplateId);

   /// <summary>
   /// Deletes the form for the given Id.
   /// </summary>
   /// <param name="formId"> The Id of the form to delete.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> DeleteForm(Guid? formId);

   /// <summary>
   /// Deletes the form field for the given Id.
   /// </summary>
   /// <param name="fieldId"> The Id of the form field to delete.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> DeleteFormField(Guid? fieldId);

   /// <summary>
   /// Deletes the group for the given Id.
   /// </summary>
   /// <param name="groupId"> The Id of the group to delete.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> DeleteGroup(Guid? groupId);

   /// <summary>
   /// Removes users as members of a group.
   /// </summary>
   /// <param name="request"> The member request that contains all of the information used to remove members to the group.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> DeleteGroupMembers(MemberDeleteRequest request);

   /// <summary>
   /// Deletes the identity provider for the given Id.
   /// </summary>
   /// <param name="identityProviderId"> The Id of the identity provider to delete.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> DeleteIdentityProvider(Guid? identityProviderId);

   /// <summary>
   /// Deletes the key for the given Id.
   /// </summary>
   /// <param name="keyId"> The Id of the key to delete.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> DeleteKey(Guid? keyId);

   /// <summary>
   /// Deletes the lambda for the given Id.
   /// </summary>
   /// <param name="lambdaId"> The Id of the lambda to delete.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> DeleteLambda(Guid? lambdaId);

   /// <summary>
   /// Deletes the user registration for the given user and application.
   /// </summary>
   /// <param name="userId"> The Id of the user whose registration is being deleted.</param>
   /// <param name="applicationId"> The Id of the application to remove the registration for.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> DeleteRegistration(Guid? userId, Guid? applicationId);

   /// <summary>
   /// Deletes the tenant for the given Id.
   /// </summary>
   /// <param name="tenantId"> The Id of the tenant to delete.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> DeleteTenant(Guid? tenantId);

   /// <summary>
   /// Deletes the theme for the given Id.
   /// </summary>
   /// <param name="themeId"> The Id of the theme to delete.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> DeleteTheme(Guid? themeId);

   /// <summary>
   /// Deletes the user for the given Id. This permanently deletes all information, metrics, reports and data associated
   /// with the user.
   /// </summary>
   /// <param name="userId"> The Id of the user to delete.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> DeleteUser(Guid? userId);

   /// <summary>
   /// Deletes the user action for the given Id. This permanently deletes the user action and also any history and logs of
   /// the action being applied to any users.
   /// </summary>
   /// <param name="userActionId"> The Id of the user action to delete.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> DeleteUserAction(Guid? userActionId);

   /// <summary>
   /// Deletes the user action reason for the given Id.
   /// </summary>
   /// <param name="userActionReasonId"> The Id of the user action reason to delete.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> DeleteUserActionReason(Guid? userActionReasonId);

   /// <summary>
   /// Deletes the users with the given ids, or users matching the provided JSON query or queryString.
   /// The order of preference is ids, query and then queryString, it is recommended to only provide one of the three for the request.
   /// 
   /// This method can be used to deactivate or permanently delete (hard-delete) users based upon the hardDelete boolean in the request body.
   /// Using the dryRun parameter you may also request the result of the action without actually deleting or deactivating any users.
   /// </summary>
   /// <param name="request"> The UserDeleteRequest.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   [Obsolete("This method has been renamed to DeleteUsersByQueryAsync, use that method instead.")]
   ClientResponse<UserDeleteResponse> DeleteUsers(UserDeleteRequest request);

   /// <summary>
   /// Deletes the users with the given ids, or users matching the provided JSON query or queryString.
   /// The order of preference is ids, query and then queryString, it is recommended to only provide one of the three for the request.
   /// 
   /// This method can be used to deactivate or permanently delete (hard-delete) users based upon the hardDelete boolean in the request body.
   /// Using the dryRun parameter you may also request the result of the action without actually deleting or deactivating any users.
   /// </summary>
   /// <param name="request"> The UserDeleteRequest.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<UserDeleteResponse> DeleteUsersByQuery(UserDeleteRequest request);

   /// <summary>
   /// Deletes the webhook for the given Id.
   /// </summary>
   /// <param name="webhookId"> The Id of the webhook to delete.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> DeleteWebhook(Guid? webhookId);

   /// <summary>
   /// Disable Two Factor authentication for a user.
   /// </summary>
   /// <param name="userId"> The Id of the User for which you're disabling Two Factor authentication.</param>
   /// <param name="code"> The Two Factor code used verify the the caller knows the Two Factor secret.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> DisableTwoFactor(Guid? userId, string code);

   /// <summary>
   /// Enable Two Factor authentication for a user.
   /// </summary>
   /// <param name="userId"> The Id of the user to enable Two Factor authentication.</param>
   /// <param name="request"> The two factor enable request information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> EnableTwoFactor(Guid? userId, TwoFactorRequest request);

   /// <summary>
   /// Exchanges an OAuth authorization code for an access token.
   /// Makes a request to the Token endpoint to exchange the authorization code returned from the Authorize endpoint for an access token.
   /// </summary>
   /// <param name="code"> The authorization code returned on the /oauth2/authorize response.</param>
   /// <param name="client_id"> The unique client identifier. The client Id is the Id of the FusionAuth Application in which you you are attempting to authenticate.</param>
   /// <param name="client_secret"> (Optional) The client secret. This value will be required if client authentication is enabled.</param>
   /// <param name="redirect_uri"> The URI to redirect to upon a successful request.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<AccessToken> ExchangeOAuthCodeForAccessToken(string code, string client_id, string client_secret, string redirect_uri);

   /// <summary>
   /// Exchanges an OAuth authorization code and code_verifier for an access token.
   /// Makes a request to the Token endpoint to exchange the authorization code returned from the Authorize endpoint and a code_verifier for an access token.
   /// </summary>
   /// <param name="code"> The authorization code returned on the /oauth2/authorize response.</param>
   /// <param name="client_id"> (Optional) The unique client identifier. The client Id is the Id of the FusionAuth Application in which you you are attempting to authenticate. This parameter is optional when the Authorization header is provided.</param>
   /// <param name="client_secret"> (Optional) The client secret. This value may optionally be provided in the request body instead of the Authorization header.</param>
   /// <param name="redirect_uri"> The URI to redirect to upon a successful request.</param>
   /// <param name="code_verifier"> The random string generated previously. Will be compared with the code_challenge sent previously, which allows the OAuth provider to authenticate your app.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<AccessToken> ExchangeOAuthCodeForAccessTokenUsingPKCE(string code, string client_id, string client_secret, string redirect_uri, string code_verifier);

   /// <summary>
   /// Exchange a Refresh Token for an Access Token.
   /// If you will be using the Refresh Token Grant, you will make a request to the Token endpoint to exchange the user’s refresh token for an access token.
   /// </summary>
   /// <param name="refresh_token"> The refresh token that you would like to use to exchange for an access token.</param>
   /// <param name="client_id"> (Optional) The unique client identifier. The client Id is the Id of the FusionAuth Application in which you you are attempting to authenticate. This parameter is optional when the Authorization header is provided.</param>
   /// <param name="client_secret"> (Optional) The client secret. This value may optionally be provided in the request body instead of the Authorization header.</param>
   /// <param name="scope"> (Optional) This parameter is optional and if omitted, the same scope requested during the authorization request will be used. If provided the scopes must match those requested during the initial authorization request.</param>
   /// <param name="user_code"> (Optional) The end-user verification code. This code is required if using this endpoint to approve the Device Authorization.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<AccessToken> ExchangeRefreshTokenForAccessToken(string refresh_token, string client_id, string client_secret, string scope, string user_code);

   /// <summary>
   /// Exchange a refresh token for a new JWT.
   /// </summary>
   /// <param name="request"> The refresh request.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RefreshResponse> ExchangeRefreshTokenForJWT(RefreshRequest request);

   /// <summary>
   /// Exchange User Credentials for a Token.
   /// If you will be using the Resource Owner Password Credential Grant, you will make a request to the Token endpoint to exchange the user’s email and password for an access token.
   /// </summary>
   /// <param name="username"> The login identifier of the user. The login identifier can be either the email or the username.</param>
   /// <param name="password"> The user’s password.</param>
   /// <param name="client_id"> (Optional) The unique client identifier. The client Id is the Id of the FusionAuth Application in which you you are attempting to authenticate. This parameter is optional when the Authorization header is provided.</param>
   /// <param name="client_secret"> (Optional) The client secret. This value may optionally be provided in the request body instead of the Authorization header.</param>
   /// <param name="scope"> (Optional) This parameter is optional and if omitted, the same scope requested during the authorization request will be used. If provided the scopes must match those requested during the initial authorization request.</param>
   /// <param name="user_code"> (Optional) The end-user verification code. This code is required if using this endpoint to approve the Device Authorization.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<AccessToken> ExchangeUserCredentialsForAccessToken(string username, string password, string client_id, string client_secret, string scope, string user_code);

   /// <summary>
   /// Begins the forgot password sequence, which kicks off an email to the user so that they can reset their password.
   /// </summary>
   /// <param name="request"> The request that contains the information about the user so that they can be emailed.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<ForgotPasswordResponse> ForgotPassword(ForgotPasswordRequest request);

   /// <summary>
   /// Generate a new Email Verification Id to be used with the Verify Email API. This API will not attempt to send an
   /// email to the User. This API may be used to collect the verificationId for use with a third party system.
   /// </summary>
   /// <param name="email"> The email address of the user that needs a new verification email.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<VerifyEmailResponse> GenerateEmailVerificationId(string email);

   /// <summary>
   /// Generate a new RSA or EC key pair or an HMAC secret.
   /// </summary>
   /// <param name="keyId"> (Optional) The Id for the key. If not provided a secure random UUID will be generated.</param>
   /// <param name="request"> The request object that contains all of the information used to create the key.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<KeyResponse> GenerateKey(Guid? keyId, KeyRequest request);

   /// <summary>
   /// Generate a new Application Registration Verification Id to be used with the Verify Registration API. This API will not attempt to send an
   /// email to the User. This API may be used to collect the verificationId for use with a third party system.
   /// </summary>
   /// <param name="email"> The email address of the user that needs a new verification email.</param>
   /// <param name="applicationId"> The Id of the application to be verified.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<VerifyRegistrationResponse> GenerateRegistrationVerificationId(string email, Guid? applicationId);

   /// <summary>
   /// Generate a Two Factor secret that can be used to enable Two Factor authentication for a User. The response will contain
   /// both the secret and a Base32 encoded form of the secret which can be shown to a User when using a 2 Step Authentication
   /// application such as Google Authenticator.
   /// </summary>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<SecretResponse> GenerateTwoFactorSecret();

   /// <summary>
   /// Generate a Two Factor secret that can be used to enable Two Factor authentication for a User. The response will contain
   /// both the secret and a Base32 encoded form of the secret which can be shown to a User when using a 2 Step Authentication
   /// application such as Google Authenticator.
   /// </summary>
   /// <param name="encodedJWT"> The encoded JWT (access token).</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<SecretResponse> GenerateTwoFactorSecretUsingJWT(string encodedJWT);

   /// <summary>
   /// Handles login via third-parties including Social login, external OAuth and OpenID Connect, and other
   /// login systems.
   /// </summary>
   /// <param name="request"> The third-party login request that contains information from the third-party login
    /// providers that FusionAuth uses to reconcile the user's account.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<LoginResponse> IdentityProviderLogin(IdentityProviderLoginRequest request);

   /// <summary>
   /// Import an existing RSA or EC key pair or an HMAC secret.
   /// </summary>
   /// <param name="keyId"> (Optional) The Id for the key. If not provided a secure random UUID will be generated.</param>
   /// <param name="request"> The request object that contains all of the information used to create the key.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<KeyResponse> ImportKey(Guid? keyId, KeyRequest request);

   /// <summary>
   /// Bulk imports refresh tokens. This request performs minimal validation and runs batch inserts of refresh tokens with the
   /// expectation that each token represents a user that already exists and is registered for the corresponding FusionAuth
   /// Application. This is done to increases the insert performance.
   /// 
   /// Therefore, if you encounter an error due to a database key violation, the response will likely offer a generic
   /// explanation. If you encounter an error, you may optionally enable additional validation to receive a JSON response
   /// body with specific validation errors. This will slow the request down but will allow you to identify the cause of
   /// the failure. See the validateDbConstraints request parameter.
   /// </summary>
   /// <param name="request"> The request that contains all of the information about all of the refresh tokens to import.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> ImportRefreshTokens(RefreshTokenImportRequest request);

   /// <summary>
   /// Bulk imports users. This request performs minimal validation and runs batch inserts of users with the expectation
   /// that each user does not yet exist and each registration corresponds to an existing FusionAuth Application. This is done to
   /// increases the insert performance.
   /// 
   /// Therefore, if you encounter an error due to a database key violation, the response will likely offer
   /// a generic explanation. If you encounter an error, you may optionally enable additional validation to receive a JSON response
   /// body with specific validation errors. This will slow the request down but will allow you to identify the cause of the failure. See
   /// the validateDbConstraints request parameter.
   /// </summary>
   /// <param name="request"> The request that contains all of the information about all of the users to import.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> ImportUsers(ImportRequest request);

   /// <summary>
   /// Inspect an access token issued by FusionAuth.
   /// </summary>
   /// <param name="client_id"> The unique client identifier. The client Id is the Id of the FusionAuth Application for which this token was generated.</param>
   /// <param name="token"> The access token returned by this OAuth provider as the result of a successful authentication.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<IntrospectResponse> IntrospectAccessToken(string client_id, string token);

   /// <summary>
   /// Issue a new access token (JWT) for the requested Application after ensuring the provided JWT is valid. A valid
   /// access token is properly signed and not expired.
   /// <p>
   /// This API may be used in an SSO configuration to issue new tokens for another application after the user has
   /// obtained a valid token from authentication.
   /// </summary>
   /// <param name="applicationId"> The Application Id for which you are requesting a new access token be issued.</param>
   /// <param name="encodedJWT"> The encoded JWT (access token).</param>
   /// <param name="refreshToken"> (Optional) An existing refresh token used to request a refresh token in addition to a JWT in the response.
    /// <p>The target application represented by the applicationId request parameter must have refresh
    /// tokens enabled in order to receive a refresh token in the response.</p></param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<IssueResponse> IssueJWT(Guid? applicationId, string encodedJWT, string refreshToken);

   /// <summary>
   /// Authenticates a user to FusionAuth. 
   /// 
   /// This API optionally requires an API key. See <code>Application.loginConfiguration.requireAuthentication</code>.
   /// </summary>
   /// <param name="request"> The login request that contains the user credentials used to log them in.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<LoginResponse> Login(LoginRequest request);

   /// <summary>
   /// Sends a ping to FusionAuth indicating that the user was automatically logged into an application. When using
   /// FusionAuth's SSO or your own, you should call this if the user is already logged in centrally, but accesses an
   /// application where they no longer have a session. This helps correctly track login counts, times and helps with
   /// reporting.
   /// </summary>
   /// <param name="userId"> The Id of the user that was logged in.</param>
   /// <param name="applicationId"> The Id of the application that they logged into.</param>
   /// <param name="callerIPAddress"> (Optional) The IP address of the end-user that is logging in. If a null value is provided
    /// the IP address will be that of the client or last proxy that sent the request.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> LoginPing(Guid? userId, Guid? applicationId, string callerIPAddress);

   /// <summary>
   /// The Logout API is intended to be used to remove the refresh token and access token cookies if they exist on the
   /// client and revoke the refresh token stored. This API does nothing if the request does not contain an access
   /// token or refresh token cookies.
   /// </summary>
   /// <param name="global"> When this value is set to true all of the refresh tokens issued to the owner of the
    /// provided token will be revoked.</param>
   /// <param name="refreshToken"> (Optional) The refresh_token as a request parameter instead of coming in via a cookie.
    /// If provided this takes precedence over the cookie.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> Logout(bool? global, string refreshToken);

   /// <summary>
   /// Retrieves the identity provider for the given domain. A 200 response code indicates the domain is managed
   /// by a registered identity provider. A 404 indicates the domain is not managed.
   /// </summary>
   /// <param name="domain"> The domain or email address to lookup.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<LookupResponse> LookupIdentityProvider(string domain);

   /// <summary>
   /// Modifies a temporal user action by changing the expiration of the action and optionally adding a comment to the
   /// action.
   /// </summary>
   /// <param name="actionId"> The Id of the action to modify. This is technically the user action log id.</param>
   /// <param name="request"> The request that contains all of the information about the modification.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<ActionResponse> ModifyAction(Guid? actionId, ActionRequest request);

   /// <summary>
   /// Complete a login request using a passwordless code
   /// </summary>
   /// <param name="request"> The passwordless login request that contains all of the information used to complete login.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<LoginResponse> PasswordlessLogin(PasswordlessLoginRequest request);

   /// <summary>
   /// Updates, via PATCH, the application with the given Id.
   /// </summary>
   /// <param name="applicationId"> The Id of the application to update.</param>
   /// <param name="request"> The request that contains just the new application information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<ApplicationResponse> PatchApplication(Guid? applicationId, Dictionary<string, object> request);

   /// <summary>
   /// Updates, via PATCH, the application role with the given id for the application.
   /// </summary>
   /// <param name="applicationId"> The Id of the application that the role belongs to.</param>
   /// <param name="roleId"> The Id of the role to update.</param>
   /// <param name="request"> The request that contains just the new role information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<ApplicationResponse> PatchApplicationRole(Guid? applicationId, Guid? roleId, Dictionary<string, object> request);

   /// <summary>
   /// Updates, via PATCH, the connector with the given Id.
   /// </summary>
   /// <param name="connectorId"> The Id of the connector to update.</param>
   /// <param name="request"> The request that contains just the new connector information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<ConnectorResponse> PatchConnector(Guid? connectorId, Dictionary<string, object> request);

   /// <summary>
   /// Updates, via PATCH, the consent with the given Id.
   /// </summary>
   /// <param name="consentId"> The Id of the consent to update.</param>
   /// <param name="request"> The request that contains just the new consent information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<ConsentResponse> PatchConsent(Guid? consentId, Dictionary<string, object> request);

   /// <summary>
   /// Updates, via PATCH, the email template with the given Id.
   /// </summary>
   /// <param name="emailTemplateId"> The Id of the email template to update.</param>
   /// <param name="request"> The request that contains just the new email template information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<EmailTemplateResponse> PatchEmailTemplate(Guid? emailTemplateId, Dictionary<string, object> request);

   /// <summary>
   /// Updates, via PATCH, the group with the given Id.
   /// </summary>
   /// <param name="groupId"> The Id of the group to update.</param>
   /// <param name="request"> The request that contains just the new group information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<GroupResponse> PatchGroup(Guid? groupId, Dictionary<string, object> request);

   /// <summary>
   /// Updates, via PATCH, the identity provider with the given Id.
   /// </summary>
   /// <param name="identityProviderId"> The Id of the identity provider to update.</param>
   /// <param name="request"> The request object that contains just the updated identity provider information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<IdentityProviderResponse> PatchIdentityProvider(Guid? identityProviderId, Dictionary<string, object> request);

   /// <summary>
   /// Updates, via PATCH, the available integrations.
   /// </summary>
   /// <param name="request"> The request that contains just the new integration information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<IntegrationResponse> PatchIntegrations(Dictionary<string, object> request);

   /// <summary>
   /// Updates, via PATCH, the lambda with the given Id.
   /// </summary>
   /// <param name="lambdaId"> The Id of the lambda to update.</param>
   /// <param name="request"> The request that contains just the new lambda information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<LambdaResponse> PatchLambda(Guid? lambdaId, Dictionary<string, object> request);

   /// <summary>
   /// Updates, via PATCH, the registration for the user with the given id and the application defined in the request.
   /// </summary>
   /// <param name="userId"> The Id of the user whose registration is going to be updated.</param>
   /// <param name="request"> The request that contains just the new registration information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RegistrationResponse> PatchRegistration(Guid? userId, Dictionary<string, object> request);

   /// <summary>
   /// Updates, via PATCH, the system configuration.
   /// </summary>
   /// <param name="request"> The request that contains just the new system configuration information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<SystemConfigurationResponse> PatchSystemConfiguration(Dictionary<string, object> request);

   /// <summary>
   /// Updates, via PATCH, the tenant with the given Id.
   /// </summary>
   /// <param name="tenantId"> The Id of the tenant to update.</param>
   /// <param name="request"> The request that contains just the new tenant information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<TenantResponse> PatchTenant(Guid? tenantId, Dictionary<string, object> request);

   /// <summary>
   /// Updates, via PATCH, the theme with the given Id.
   /// </summary>
   /// <param name="themeId"> The Id of the theme to update.</param>
   /// <param name="request"> The request that contains just the new theme information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<ThemeResponse> PatchTheme(Guid? themeId, Dictionary<string, object> request);

   /// <summary>
   /// Updates, via PATCH, the user with the given Id.
   /// </summary>
   /// <param name="userId"> The Id of the user to update.</param>
   /// <param name="request"> The request that contains just the new user information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<UserResponse> PatchUser(Guid? userId, Dictionary<string, object> request);

   /// <summary>
   /// Updates, via PATCH, the user action with the given Id.
   /// </summary>
   /// <param name="userActionId"> The Id of the user action to update.</param>
   /// <param name="request"> The request that contains just the new user action information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<UserActionResponse> PatchUserAction(Guid? userActionId, Dictionary<string, object> request);

   /// <summary>
   /// Updates, via PATCH, the user action reason with the given Id.
   /// </summary>
   /// <param name="userActionReasonId"> The Id of the user action reason to update.</param>
   /// <param name="request"> The request that contains just the new user action reason information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<UserActionReasonResponse> PatchUserActionReason(Guid? userActionReasonId, Dictionary<string, object> request);

   /// <summary>
   /// Updates, via PATCH, a single User consent by Id.
   /// </summary>
   /// <param name="userConsentId"> The User Consent Id</param>
   /// <param name="request"> The request that contains just the new user consent information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<UserConsentResponse> PatchUserConsent(Guid? userConsentId, Dictionary<string, object> request);

   /// <summary>
   /// Reactivates the application with the given Id.
   /// </summary>
   /// <param name="applicationId"> The Id of the application to reactivate.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<ApplicationResponse> ReactivateApplication(Guid? applicationId);

   /// <summary>
   /// Reactivates the user with the given Id.
   /// </summary>
   /// <param name="userId"> The Id of the user to reactivate.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<UserResponse> ReactivateUser(Guid? userId);

   /// <summary>
   /// Reactivates the user action with the given Id.
   /// </summary>
   /// <param name="userActionId"> The Id of the user action to reactivate.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<UserActionResponse> ReactivateUserAction(Guid? userActionId);

   /// <summary>
   /// Reconcile a User to FusionAuth using JWT issued from another Identity Provider.
   /// </summary>
   /// <param name="request"> The reconcile request that contains the data to reconcile the User.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<LoginResponse> ReconcileJWT(IdentityProviderLoginRequest request);

   /// <summary>
   /// Request a refresh of the User search index. This API is not generally necessary and the search index will become consistent in a
   /// reasonable amount of time. There may be scenarios where you may wish to manually request an index refresh. One example may be 
   /// if you are using the Search API or Delete Tenant API immediately following a User Create etc, you may wish to request a refresh to
   ///  ensure the index immediately current before making a query request to the search index.
   /// </summary>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> RefreshUserSearchIndex();

   /// <summary>
   /// Registers a user for an application. If you provide the User and the UserRegistration object on this request, it
   /// will create the user as well as register them for the application. This is called a Full Registration. However, if
   /// you only provide the UserRegistration object, then the user must already exist and they will be registered for the
   /// application. The user id can also be provided and it will either be used to look up an existing user or it will be
   /// used for the newly created User.
   /// </summary>
   /// <param name="userId"> (Optional) The Id of the user being registered for the application and optionally created.</param>
   /// <param name="request"> The request that optionally contains the User and must contain the UserRegistration.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RegistrationResponse> Register(Guid? userId, RegistrationRequest request);

   /// <summary>
   /// Removes a user from the family with the given id.
   /// </summary>
   /// <param name="familyId"> The id of the family to remove the user from.</param>
   /// <param name="userId"> The id of the user to remove from the family.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> RemoveUserFromFamily(Guid? familyId, Guid? userId);

   /// <summary>
   /// Re-sends the verification email to the user.
   /// </summary>
   /// <param name="email"> The email address of the user that needs a new verification email.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<VerifyEmailResponse> ResendEmailVerification(string email);

   /// <summary>
   /// Re-sends the verification email to the user. If the Application has configured a specific email template this will be used
   /// instead of the tenant configuration.
   /// </summary>
   /// <param name="applicationId"> The unique Application Id to used to resolve an application specific email template.</param>
   /// <param name="email"> The email address of the user that needs a new verification email.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<VerifyEmailResponse> ResendEmailVerificationWithApplicationTemplate(Guid? applicationId, string email);

   /// <summary>
   /// Re-sends the application registration verification email to the user.
   /// </summary>
   /// <param name="email"> The email address of the user that needs a new verification email.</param>
   /// <param name="applicationId"> The Id of the application to be verified.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<VerifyRegistrationResponse> ResendRegistrationVerification(string email, Guid? applicationId);

   /// <summary>
   /// Retrieves a single action log (the log of a user action that was taken on a user previously) for the given Id.
   /// </summary>
   /// <param name="actionId"> The Id of the action to retrieve.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<ActionResponse> RetrieveAction(Guid? actionId);

   /// <summary>
   /// Retrieves all of the actions for the user with the given Id. This will return all time based actions that are active,
   /// and inactive as well as non-time based actions.
   /// </summary>
   /// <param name="userId"> The Id of the user to fetch the actions for.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<ActionResponse> RetrieveActions(Guid? userId);

   /// <summary>
   /// Retrieves all of the actions for the user with the given Id that are currently preventing the User from logging in.
   /// </summary>
   /// <param name="userId"> The Id of the user to fetch the actions for.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<ActionResponse> RetrieveActionsPreventingLogin(Guid? userId);

   /// <summary>
   /// Retrieves all of the actions for the user with the given Id that are currently active.
   /// An active action means one that is time based and has not been canceled, and has not ended.
   /// </summary>
   /// <param name="userId"> The Id of the user to fetch the actions for.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<ActionResponse> RetrieveActiveActions(Guid? userId);

   /// <summary>
   /// Retrieves the application for the given id or all of the applications if the id is null.
   /// </summary>
   /// <param name="applicationId"> (Optional) The application id.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<ApplicationResponse> RetrieveApplication(Guid? applicationId);

   /// <summary>
   /// Retrieves all of the applications.
   /// </summary>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<ApplicationResponse> RetrieveApplications();

   /// <summary>
   /// Retrieves a single audit log for the given Id.
   /// </summary>
   /// <param name="auditLogId"> The Id of the audit log to retrieve.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<AuditLogResponse> RetrieveAuditLog(int? auditLogId);

   /// <summary>
   /// Retrieves the connector with the given Id.
   /// </summary>
   /// <param name="connectorId"> The Id of the connector.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<ConnectorResponse> RetrieveConnector(Guid? connectorId);

   /// <summary>
   /// Retrieves all of the connectors.
   /// </summary>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<ConnectorResponse> RetrieveConnectors();

   /// <summary>
   /// Retrieves the Consent for the given Id.
   /// </summary>
   /// <param name="consentId"> The Id of the consent.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<ConsentResponse> RetrieveConsent(Guid? consentId);

   /// <summary>
   /// Retrieves all of the consent.
   /// </summary>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<ConsentResponse> RetrieveConsents();

   /// <summary>
   /// Retrieves the daily active user report between the two instants. If you specify an application id, it will only
   /// return the daily active counts for that application.
   /// </summary>
   /// <param name="applicationId"> (Optional) The application id.</param>
   /// <param name="start"> The start instant as UTC milliseconds since Epoch.</param>
   /// <param name="end"> The end instant as UTC milliseconds since Epoch.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<DailyActiveUserReportResponse> RetrieveDailyActiveReport(Guid? applicationId, long? start, long? end);

   /// <summary>
   /// Retrieves the email template for the given Id. If you don't specify the id, this will return all of the email templates.
   /// </summary>
   /// <param name="emailTemplateId"> (Optional) The Id of the email template.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<EmailTemplateResponse> RetrieveEmailTemplate(Guid? emailTemplateId);

   /// <summary>
   /// Creates a preview of the email template provided in the request. This allows you to preview an email template that
   /// hasn't been saved to the database yet. The entire email template does not need to be provided on the request. This
   /// will create the preview based on whatever is given.
   /// </summary>
   /// <param name="request"> The request that contains the email template and optionally a locale to render it in.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<PreviewResponse> RetrieveEmailTemplatePreview(PreviewRequest request);

   /// <summary>
   /// Retrieves all of the email templates.
   /// </summary>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<EmailTemplateResponse> RetrieveEmailTemplates();

   /// <summary>
   /// Retrieves a single event log for the given Id.
   /// </summary>
   /// <param name="eventLogId"> The Id of the event log to retrieve.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<EventLogResponse> RetrieveEventLog(int? eventLogId);

   /// <summary>
   /// Retrieves all of the families that a user belongs to.
   /// </summary>
   /// <param name="userId"> The User's id</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<FamilyResponse> RetrieveFamilies(Guid? userId);

   /// <summary>
   /// Retrieves all of the members of a family by the unique Family Id.
   /// </summary>
   /// <param name="familyId"> The unique Id of the Family.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<FamilyResponse> RetrieveFamilyMembersByFamilyId(Guid? familyId);

   /// <summary>
   /// Retrieves the form with the given Id.
   /// </summary>
   /// <param name="formId"> The Id of the form.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<FormResponse> RetrieveForm(Guid? formId);

   /// <summary>
   /// Retrieves the form field with the given Id.
   /// </summary>
   /// <param name="fieldId"> The Id of the form field.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<FormFieldResponse> RetrieveFormField(Guid? fieldId);

   /// <summary>
   /// Retrieves all of the forms fields
   /// </summary>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<FormFieldResponse> RetrieveFormFields();

   /// <summary>
   /// Retrieves all of the forms.
   /// </summary>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<FormResponse> RetrieveForms();

   /// <summary>
   /// Retrieves the group for the given Id.
   /// </summary>
   /// <param name="groupId"> The Id of the group.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<GroupResponse> RetrieveGroup(Guid? groupId);

   /// <summary>
   /// Retrieves all of the groups.
   /// </summary>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<GroupResponse> RetrieveGroups();

   /// <summary>
   /// Retrieves the identity provider for the given id or all of the identity providers if the id is null.
   /// </summary>
   /// <param name="identityProviderId"> (Optional) The identity provider id.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<IdentityProviderResponse> RetrieveIdentityProvider(Guid? identityProviderId);

   /// <summary>
   /// Retrieves all of the identity providers.
   /// </summary>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<IdentityProviderResponse> RetrieveIdentityProviders();

   /// <summary>
   /// Retrieves all of the actions for the user with the given Id that are currently inactive.
   /// An inactive action means one that is time based and has been canceled or has expired, or is not time based.
   /// </summary>
   /// <param name="userId"> The Id of the user to fetch the actions for.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<ActionResponse> RetrieveInactiveActions(Guid? userId);

   /// <summary>
   /// Retrieves all of the applications that are currently inactive.
   /// </summary>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<ApplicationResponse> RetrieveInactiveApplications();

   /// <summary>
   /// Retrieves all of the user actions that are currently inactive.
   /// </summary>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<UserActionResponse> RetrieveInactiveUserActions();

   /// <summary>
   /// Retrieves the available integrations.
   /// </summary>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<IntegrationResponse> RetrieveIntegration();

   /// <summary>
   /// Retrieves the Public Key configured for verifying JSON Web Tokens (JWT) by the key Id (kid).
   /// </summary>
   /// <param name="keyId"> The Id of the public key (kid).</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<PublicKeyResponse> RetrieveJWTPublicKey(string keyId);

   /// <summary>
   /// Retrieves the Public Key configured for verifying the JSON Web Tokens (JWT) issued by the Login API by the Application Id.
   /// </summary>
   /// <param name="applicationId"> The Id of the Application for which this key is used.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<PublicKeyResponse> RetrieveJWTPublicKeyByApplicationId(string applicationId);

   /// <summary>
   /// Retrieves all Public Keys configured for verifying JSON Web Tokens (JWT).
   /// </summary>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<PublicKeyResponse> RetrieveJWTPublicKeys();

   /// <summary>
   /// Returns public keys used by FusionAuth to cryptographically verify JWTs using the JSON Web Key format.
   /// </summary>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<JWKSResponse> RetrieveJsonWebKeySet();

   /// <summary>
   /// Retrieves the key for the given Id.
   /// </summary>
   /// <param name="keyId"> The Id of the key.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<KeyResponse> RetrieveKey(Guid? keyId);

   /// <summary>
   /// Retrieves all of the keys.
   /// </summary>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<KeyResponse> RetrieveKeys();

   /// <summary>
   /// Retrieves the lambda for the given Id.
   /// </summary>
   /// <param name="lambdaId"> The Id of the lambda.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<LambdaResponse> RetrieveLambda(Guid? lambdaId);

   /// <summary>
   /// Retrieves all of the lambdas.
   /// </summary>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<LambdaResponse> RetrieveLambdas();

   /// <summary>
   /// Retrieves all of the lambdas for the provided type.
   /// </summary>
   /// <param name="type"> The type of the lambda to return.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<LambdaResponse> RetrieveLambdasByType(LambdaType type);

   /// <summary>
   /// Retrieves the login report between the two instants. If you specify an application id, it will only return the
   /// login counts for that application.
   /// </summary>
   /// <param name="applicationId"> (Optional) The application id.</param>
   /// <param name="start"> The start instant as UTC milliseconds since Epoch.</param>
   /// <param name="end"> The end instant as UTC milliseconds since Epoch.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<LoginReportResponse> RetrieveLoginReport(Guid? applicationId, long? start, long? end);

   /// <summary>
   /// Retrieves the monthly active user report between the two instants. If you specify an application id, it will only
   /// return the monthly active counts for that application.
   /// </summary>
   /// <param name="applicationId"> (Optional) The application id.</param>
   /// <param name="start"> The start instant as UTC milliseconds since Epoch.</param>
   /// <param name="end"> The end instant as UTC milliseconds since Epoch.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<MonthlyActiveUserReportResponse> RetrieveMonthlyActiveReport(Guid? applicationId, long? start, long? end);

   /// <summary>
   /// Retrieves the Oauth2 configuration for the application for the given Application Id.
   /// </summary>
   /// <param name="applicationId"> The Id of the Application to retrieve OAuth configuration.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<OAuthConfigurationResponse> RetrieveOauthConfiguration(Guid? applicationId);

   /// <summary>
   /// Returns the well known OpenID Configuration JSON document
   /// </summary>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<OpenIdConfiguration> RetrieveOpenIdConfiguration();

   /// <summary>
   /// Retrieves the password validation rules for a specific tenant. This method requires a tenantId to be provided 
   /// through the use of a Tenant scoped API key or an HTTP header X-FusionAuth-TenantId to specify the Tenant Id.
   /// 
   /// This API does not require an API key.
   /// </summary>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<PasswordValidationRulesResponse> RetrievePasswordValidationRules();

   /// <summary>
   /// Retrieves the password validation rules for a specific tenant.
   /// 
   /// This API does not require an API key.
   /// </summary>
   /// <param name="tenantId"> The Id of the tenant.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<PasswordValidationRulesResponse> RetrievePasswordValidationRulesWithTenantId(Guid? tenantId);

   /// <summary>
   /// Retrieves all of the children for the given parent email address.
   /// </summary>
   /// <param name="parentEmail"> The email of the parent.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<PendingResponse> RetrievePendingChildren(string parentEmail);

   /// <summary>
   /// Retrieves the last number of login records.
   /// </summary>
   /// <param name="offset"> The initial record. e.g. 0 is the last login, 100 will be the 100th most recent login.</param>
   /// <param name="limit"> (Optional, defaults to 10) The number of records to retrieve.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RecentLoginResponse> RetrieveRecentLogins(int? offset, int? limit);

   /// <summary>
   /// Retrieves the refresh tokens that belong to the user with the given Id.
   /// </summary>
   /// <param name="userId"> The Id of the user.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RefreshResponse> RetrieveRefreshTokens(Guid? userId);

   /// <summary>
   /// Retrieves the user registration for the user with the given id and the given application id.
   /// </summary>
   /// <param name="userId"> The Id of the user.</param>
   /// <param name="applicationId"> The Id of the application.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RegistrationResponse> RetrieveRegistration(Guid? userId, Guid? applicationId);

   /// <summary>
   /// Retrieves the registration report between the two instants. If you specify an application id, it will only return
   /// the registration counts for that application.
   /// </summary>
   /// <param name="applicationId"> (Optional) The application id.</param>
   /// <param name="start"> The start instant as UTC milliseconds since Epoch.</param>
   /// <param name="end"> The end instant as UTC milliseconds since Epoch.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RegistrationReportResponse> RetrieveRegistrationReport(Guid? applicationId, long? start, long? end);

   /// <summary>
   /// Retrieves the system configuration.
   /// </summary>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<SystemConfigurationResponse> RetrieveSystemConfiguration();

   /// <summary>
   /// Retrieves the tenant for the given Id.
   /// </summary>
   /// <param name="tenantId"> The Id of the tenant.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<TenantResponse> RetrieveTenant(Guid? tenantId);

   /// <summary>
   /// Retrieves all of the tenants.
   /// </summary>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<TenantResponse> RetrieveTenants();

   /// <summary>
   /// Retrieves the theme for the given Id.
   /// </summary>
   /// <param name="themeId"> The Id of the theme.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<ThemeResponse> RetrieveTheme(Guid? themeId);

   /// <summary>
   /// Retrieves all of the themes.
   /// </summary>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<ThemeResponse> RetrieveThemes();

   /// <summary>
   /// Retrieves the totals report. This contains all of the total counts for each application and the global registration
   /// count.
   /// </summary>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<TotalsReportResponse> RetrieveTotalReport();

   /// <summary>
   /// Retrieves the user for the given Id.
   /// </summary>
   /// <param name="userId"> The Id of the user.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<UserResponse> RetrieveUser(Guid? userId);

   /// <summary>
   /// Retrieves the user action for the given Id. If you pass in null for the id, this will return all of the user
   /// actions.
   /// </summary>
   /// <param name="userActionId"> (Optional) The Id of the user action.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<UserActionResponse> RetrieveUserAction(Guid? userActionId);

   /// <summary>
   /// Retrieves the user action reason for the given Id. If you pass in null for the id, this will return all of the user
   /// action reasons.
   /// </summary>
   /// <param name="userActionReasonId"> (Optional) The Id of the user action reason.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<UserActionReasonResponse> RetrieveUserActionReason(Guid? userActionReasonId);

   /// <summary>
   /// Retrieves all the user action reasons.
   /// </summary>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<UserActionReasonResponse> RetrieveUserActionReasons();

   /// <summary>
   /// Retrieves all of the user actions.
   /// </summary>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<UserActionResponse> RetrieveUserActions();

   /// <summary>
   /// Retrieves the user by a change password Id. The intended use of this API is to retrieve a user after the forgot
   /// password workflow has been initiated and you may not know the user's email or username.
   /// </summary>
   /// <param name="changePasswordId"> The unique change password Id that was sent via email or returned by the Forgot Password API.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<UserResponse> RetrieveUserByChangePasswordId(string changePasswordId);

   /// <summary>
   /// Retrieves the user for the given email.
   /// </summary>
   /// <param name="email"> The email of the user.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<UserResponse> RetrieveUserByEmail(string email);

   /// <summary>
   /// Retrieves the user for the loginId. The loginId can be either the username or the email.
   /// </summary>
   /// <param name="loginId"> The email or username of the user.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<UserResponse> RetrieveUserByLoginId(string loginId);

   /// <summary>
   /// Retrieves the user for the given username.
   /// </summary>
   /// <param name="username"> The username of the user.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<UserResponse> RetrieveUserByUsername(string username);

   /// <summary>
   /// Retrieves the user by a verificationId. The intended use of this API is to retrieve a user after the forgot
   /// password workflow has been initiated and you may not know the user's email or username.
   /// </summary>
   /// <param name="verificationId"> The unique verification Id that has been set on the user object.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<UserResponse> RetrieveUserByVerificationId(string verificationId);

   /// <summary>
   /// Retrieves all of the comments for the user with the given Id.
   /// </summary>
   /// <param name="userId"> The Id of the user.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<UserCommentResponse> RetrieveUserComments(Guid? userId);

   /// <summary>
   /// Retrieve a single User consent by Id.
   /// </summary>
   /// <param name="userConsentId"> The User consent Id</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<UserConsentResponse> RetrieveUserConsent(Guid? userConsentId);

   /// <summary>
   /// Retrieves all of the consents for a User.
   /// </summary>
   /// <param name="userId"> The User's Id</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<UserConsentResponse> RetrieveUserConsents(Guid? userId);

   /// <summary>
   /// Call the UserInfo endpoint to retrieve User Claims from the access token issued by FusionAuth.
   /// </summary>
   /// <param name="encodedJWT"> The encoded JWT (access token).</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<UserResponse> RetrieveUserInfoFromAccessToken(string encodedJWT);

   /// <summary>
   /// Retrieves the login report between the two instants for a particular user by Id. If you specify an application id, it will only return the
   /// login counts for that application.
   /// </summary>
   /// <param name="applicationId"> (Optional) The application id.</param>
   /// <param name="userId"> The userId id.</param>
   /// <param name="start"> The start instant as UTC milliseconds since Epoch.</param>
   /// <param name="end"> The end instant as UTC milliseconds since Epoch.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<LoginReportResponse> RetrieveUserLoginReport(Guid? applicationId, Guid? userId, long? start, long? end);

   /// <summary>
   /// Retrieves the login report between the two instants for a particular user by login Id. If you specify an application id, it will only return the
   /// login counts for that application.
   /// </summary>
   /// <param name="applicationId"> (Optional) The application id.</param>
   /// <param name="loginId"> The userId id.</param>
   /// <param name="start"> The start instant as UTC milliseconds since Epoch.</param>
   /// <param name="end"> The end instant as UTC milliseconds since Epoch.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<LoginReportResponse> RetrieveUserLoginReportByLoginId(Guid? applicationId, string loginId, long? start, long? end);

   /// <summary>
   /// Retrieves the last number of login records for a user.
   /// </summary>
   /// <param name="userId"> The Id of the user.</param>
   /// <param name="offset"> The initial record. e.g. 0 is the last login, 100 will be the 100th most recent login.</param>
   /// <param name="limit"> (Optional, defaults to 10) The number of records to retrieve.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RecentLoginResponse> RetrieveUserRecentLogins(Guid? userId, int? offset, int? limit);

   /// <summary>
   /// Retrieves the user for the given Id. This method does not use an API key, instead it uses a JSON Web Token (JWT) for authentication.
   /// </summary>
   /// <param name="encodedJWT"> The encoded JWT (access token).</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<UserResponse> RetrieveUserUsingJWT(string encodedJWT);

   /// <summary>
   /// Retrieves the webhook for the given Id. If you pass in null for the id, this will return all the webhooks.
   /// </summary>
   /// <param name="webhookId"> (Optional) The Id of the webhook.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<WebhookResponse> RetrieveWebhook(Guid? webhookId);

   /// <summary>
   /// Retrieves all the webhooks.
   /// </summary>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<WebhookResponse> RetrieveWebhooks();

   /// <summary>
   /// Revokes a single refresh token, all tokens for a user or all tokens for an application. If you provide a user id
   /// and an application id, this will delete all the refresh tokens for that user for that application.
   /// </summary>
   /// <param name="token"> (Optional) The refresh token to delete.</param>
   /// <param name="userId"> (Optional) The user id whose tokens to delete.</param>
   /// <param name="applicationId"> (Optional) The application id of the tokens to delete.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> RevokeRefreshToken(string token, Guid? userId, Guid? applicationId);

   /// <summary>
   /// Revokes a single User consent by Id.
   /// </summary>
   /// <param name="userConsentId"> The User Consent Id</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> RevokeUserConsent(Guid? userConsentId);

   /// <summary>
   /// Searches the audit logs with the specified criteria and pagination.
   /// </summary>
   /// <param name="request"> The search criteria and pagination information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<AuditLogSearchResponse> SearchAuditLogs(AuditLogSearchRequest request);

   /// <summary>
   /// Searches the event logs with the specified criteria and pagination.
   /// </summary>
   /// <param name="request"> The search criteria and pagination information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<EventLogSearchResponse> SearchEventLogs(EventLogSearchRequest request);

   /// <summary>
   /// Searches the login records with the specified criteria and pagination.
   /// </summary>
   /// <param name="request"> The search criteria and pagination information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<LoginRecordSearchResponse> SearchLoginRecords(LoginRecordSearchRequest request);

   /// <summary>
   /// Retrieves the users for the given ids. If any id is invalid, it is ignored.
   /// </summary>
   /// <param name="ids"> The user ids to search for.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   [Obsolete("This method has been renamed to SearchUsersByIdsAsync, use that method instead.")]
   ClientResponse<SearchResponse> SearchUsers(List<string> ids);

   /// <summary>
   /// Retrieves the users for the given ids. If any id is invalid, it is ignored.
   /// </summary>
   /// <param name="ids"> The user ids to search for.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<SearchResponse> SearchUsersByIds(List<string> ids);

   /// <summary>
   /// Retrieves the users for the given search criteria and pagination.
   /// </summary>
   /// <param name="request"> The search criteria and pagination constraints. Fields used: ids, query, queryString, numberOfResults, orderBy, startRow,
    /// and sortFields.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<SearchResponse> SearchUsersByQuery(SearchRequest request);

   /// <summary>
   /// Retrieves the users for the given search criteria and pagination.
   /// </summary>
   /// <param name="request"> The search criteria and pagination constraints. Fields used: ids, query, queryString, numberOfResults, orderBy, startRow,
    /// and sortFields.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   [Obsolete("This method has been renamed to SearchUsersByQueryAsync, use that method instead.")]
   ClientResponse<SearchResponse> SearchUsersByQueryString(SearchRequest request);

   /// <summary>
   /// Send an email using an email template id. You can optionally provide <code>requestData</code> to access key value
   /// pairs in the email template.
   /// </summary>
   /// <param name="emailTemplateId"> The id for the template.</param>
   /// <param name="request"> The send email request that contains all of the information used to send the email.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<SendResponse> SendEmail(Guid? emailTemplateId, SendRequest request);

   /// <summary>
   /// Sends out an email to a parent that they need to register and create a family or need to log in and add a child to their existing family.
   /// </summary>
   /// <param name="request"> The request object that contains the parent email.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> SendFamilyRequestEmail(FamilyEmailRequest request);

   /// <summary>
   /// Send a passwordless authentication code in an email to complete login.
   /// </summary>
   /// <param name="request"> The passwordless send request that contains all of the information used to send an email containing a code.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> SendPasswordlessCode(PasswordlessSendRequest request);

   /// <summary>
   /// Send a Two Factor authentication code to assist in setting up Two Factor authentication or disabling.
   /// </summary>
   /// <param name="request"> The request object that contains all of the information used to send the code.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> SendTwoFactorCode(TwoFactorSendRequest request);

   /// <summary>
   /// Send a Two Factor authentication code to allow the completion of Two Factor authentication.
   /// </summary>
   /// <param name="twoFactorId"> The Id returned by the Login API necessary to complete Two Factor authentication.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> SendTwoFactorCodeForLogin(string twoFactorId);

   /// <summary>
   /// Begins a login request for a 3rd party login that requires user interaction such as HYPR.
   /// </summary>
   /// <param name="request"> The third-party login request that contains information from the third-party login
    /// providers that FusionAuth uses to reconcile the user's account.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<IdentityProviderStartLoginResponse> StartIdentityProviderLogin(IdentityProviderStartLoginRequest request);

   /// <summary>
   /// Start a passwordless login request by generating a passwordless code. This code can be sent to the User using the Send
   /// Passwordless Code API or using a mechanism outside of FusionAuth. The passwordless login is completed by using the Passwordless Login API with this code.
   /// </summary>
   /// <param name="request"> The passwordless start request that contains all of the information used to begin the passwordless login request.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<PasswordlessStartResponse> StartPasswordlessLogin(PasswordlessStartRequest request);

   /// <summary>
   /// Complete login using a 2FA challenge
   /// </summary>
   /// <param name="request"> The login request that contains the user credentials used to log them in.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<LoginResponse> TwoFactorLogin(TwoFactorLoginRequest request);

   /// <summary>
   /// Updates the application with the given Id.
   /// </summary>
   /// <param name="applicationId"> The Id of the application to update.</param>
   /// <param name="request"> The request that contains all of the new application information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<ApplicationResponse> UpdateApplication(Guid? applicationId, ApplicationRequest request);

   /// <summary>
   /// Updates the application role with the given id for the application.
   /// </summary>
   /// <param name="applicationId"> The Id of the application that the role belongs to.</param>
   /// <param name="roleId"> The Id of the role to update.</param>
   /// <param name="request"> The request that contains all of the new role information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<ApplicationResponse> UpdateApplicationRole(Guid? applicationId, Guid? roleId, ApplicationRequest request);

   /// <summary>
   /// Updates the connector with the given Id.
   /// </summary>
   /// <param name="connectorId"> The Id of the connector to update.</param>
   /// <param name="request"> The request object that contains all of the new connector information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<ConnectorResponse> UpdateConnector(Guid? connectorId, ConnectorRequest request);

   /// <summary>
   /// Updates the consent with the given Id.
   /// </summary>
   /// <param name="consentId"> The Id of the consent to update.</param>
   /// <param name="request"> The request that contains all of the new consent information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<ConsentResponse> UpdateConsent(Guid? consentId, ConsentRequest request);

   /// <summary>
   /// Updates the email template with the given Id.
   /// </summary>
   /// <param name="emailTemplateId"> The Id of the email template to update.</param>
   /// <param name="request"> The request that contains all of the new email template information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<EmailTemplateResponse> UpdateEmailTemplate(Guid? emailTemplateId, EmailTemplateRequest request);

   /// <summary>
   /// Updates the form with the given Id.
   /// </summary>
   /// <param name="formId"> The Id of the form to update.</param>
   /// <param name="request"> The request object that contains all of the new form information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<FormResponse> UpdateForm(Guid? formId, FormRequest request);

   /// <summary>
   /// Updates the form field with the given Id.
   /// </summary>
   /// <param name="fieldId"> The Id of the form field to update.</param>
   /// <param name="request"> The request object that contains all of the new form field information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<FormFieldResponse> UpdateFormField(Guid? fieldId, FormFieldRequest request);

   /// <summary>
   /// Updates the group with the given Id.
   /// </summary>
   /// <param name="groupId"> The Id of the group to update.</param>
   /// <param name="request"> The request that contains all of the new group information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<GroupResponse> UpdateGroup(Guid? groupId, GroupRequest request);

   /// <summary>
   /// Updates the identity provider with the given Id.
   /// </summary>
   /// <param name="identityProviderId"> The Id of the identity provider to update.</param>
   /// <param name="request"> The request object that contains the updated identity provider.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<IdentityProviderResponse> UpdateIdentityProvider(Guid? identityProviderId, IdentityProviderRequest request);

   /// <summary>
   /// Updates the available integrations.
   /// </summary>
   /// <param name="request"> The request that contains all of the new integration information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<IntegrationResponse> UpdateIntegrations(IntegrationRequest request);

   /// <summary>
   /// Updates the key with the given Id.
   /// </summary>
   /// <param name="keyId"> The Id of the key to update.</param>
   /// <param name="request"> The request that contains all of the new key information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<KeyResponse> UpdateKey(Guid? keyId, KeyRequest request);

   /// <summary>
   /// Updates the lambda with the given Id.
   /// </summary>
   /// <param name="lambdaId"> The Id of the lambda to update.</param>
   /// <param name="request"> The request that contains all of the new lambda information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<LambdaResponse> UpdateLambda(Guid? lambdaId, LambdaRequest request);

   /// <summary>
   /// Updates the registration for the user with the given id and the application defined in the request.
   /// </summary>
   /// <param name="userId"> The Id of the user whose registration is going to be updated.</param>
   /// <param name="request"> The request that contains all of the new registration information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RegistrationResponse> UpdateRegistration(Guid? userId, RegistrationRequest request);

   /// <summary>
   /// Updates the system configuration.
   /// </summary>
   /// <param name="request"> The request that contains all of the new system configuration information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<SystemConfigurationResponse> UpdateSystemConfiguration(SystemConfigurationRequest request);

   /// <summary>
   /// Updates the tenant with the given Id.
   /// </summary>
   /// <param name="tenantId"> The Id of the tenant to update.</param>
   /// <param name="request"> The request that contains all of the new tenant information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<TenantResponse> UpdateTenant(Guid? tenantId, TenantRequest request);

   /// <summary>
   /// Updates the theme with the given Id.
   /// </summary>
   /// <param name="themeId"> The Id of the theme to update.</param>
   /// <param name="request"> The request that contains all of the new theme information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<ThemeResponse> UpdateTheme(Guid? themeId, ThemeRequest request);

   /// <summary>
   /// Updates the user with the given Id.
   /// </summary>
   /// <param name="userId"> The Id of the user to update.</param>
   /// <param name="request"> The request that contains all of the new user information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<UserResponse> UpdateUser(Guid? userId, UserRequest request);

   /// <summary>
   /// Updates the user action with the given Id.
   /// </summary>
   /// <param name="userActionId"> The Id of the user action to update.</param>
   /// <param name="request"> The request that contains all of the new user action information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<UserActionResponse> UpdateUserAction(Guid? userActionId, UserActionRequest request);

   /// <summary>
   /// Updates the user action reason with the given Id.
   /// </summary>
   /// <param name="userActionReasonId"> The Id of the user action reason to update.</param>
   /// <param name="request"> The request that contains all of the new user action reason information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<UserActionReasonResponse> UpdateUserActionReason(Guid? userActionReasonId, UserActionReasonRequest request);

   /// <summary>
   /// Updates a single User consent by Id.
   /// </summary>
   /// <param name="userConsentId"> The User Consent Id</param>
   /// <param name="request"> The request that contains the user consent information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<UserConsentResponse> UpdateUserConsent(Guid? userConsentId, UserConsentRequest request);

   /// <summary>
   /// Updates the webhook with the given Id.
   /// </summary>
   /// <param name="webhookId"> The Id of the webhook to update.</param>
   /// <param name="request"> The request that contains all of the new webhook information.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<WebhookResponse> UpdateWebhook(Guid? webhookId, WebhookRequest request);

   /// <summary>
   /// Validates the end-user provided user_code from the user-interaction of the Device Authorization Grant.
   /// If you build your own activation form you should validate the user provided code prior to beginning the Authorization grant.
   /// </summary>
   /// <param name="user_code"> The end-user verification code.</param>
   /// <param name="client_id"> The client id.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> ValidateDevice(string user_code, string client_id);

   /// <summary>
   /// Validates the provided JWT (encoded JWT string) to ensure the token is valid. A valid access token is properly
   /// signed and not expired.
   /// <p>
   /// This API may be used to verify the JWT as well as decode the encoded JWT into human readable identity claims.
   /// </summary>
   /// <param name="encodedJWT"> The encoded JWT (access token).</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<ValidateResponse> ValidateJWT(string encodedJWT);

   /// <summary>
   /// Confirms a email verification. The Id given is usually from an email sent to the user.
   /// </summary>
   /// <param name="verificationId"> The email verification id sent to the user.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> VerifyEmail(string verificationId);

   /// <summary>
   /// Confirms an application registration. The Id given is usually from an email sent to the user.
   /// </summary>
   /// <param name="verificationId"> The registration verification Id sent to the user.</param>
   /// <returns>
   /// When successful, the response will contain the log of the action. If there was a validation error or any
   /// other type of error, this will return the Errors object in the response. Additionally, if FusionAuth could not be
   /// contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   /// IOException.
   /// </returns>
   ClientResponse<RESTVoid> VerifyRegistration(string verificationId);
 }
}
